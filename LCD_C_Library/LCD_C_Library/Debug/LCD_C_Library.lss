
LCD_C_Library.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  00002d52  00002de6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  008001fe  008001fe  00002ee4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002ee4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00002f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a88  00000000  00000000  00003134  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e31  00000000  00000000  00006bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001683  00000000  00000000  000079ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ec  00000000  00000000  00009070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b0e  00000000  00000000  0000985c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000031ea  00000000  00000000  0000a36a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000d554  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__ctors_end>
       4:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
       8:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
       c:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      10:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      14:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      18:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      1c:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      20:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      24:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      28:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      2c:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      30:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      34:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      38:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      3c:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      40:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      44:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      48:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      4c:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      50:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      54:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      58:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      5c:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      60:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>
      64:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 2b       	or	r16, r16
      6c:	00 0b       	sbc	r16, r16
      6e:	0a 00       	.word	0x000a	; ????
      70:	00 1a       	sub	r0, r16
      72:	1b 2a       	or	r1, r27
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <Font24_Table>:
	...
      dc:	00 00 03 80 00 03 80 00 03 80 00 03 80 00 03 80     ................
      ec:	00 03 80 00 03 80 00 03 80 00 03 80 00 01 00 00     ................
      fc:	01 00 00 00 00 00 00 00 00 03 80 00 03 80 00 00     ................
	...
     128:	00 0e 70 00 0e 70 00 0e 70 00 04 20 00 04 20 00     ..p..p..p.. .. .
     138:	04 20 00 04 20 00 00 00 00 00 00 00 00 00 00 00     . .. ...........
	...
     16c:	00 00 06 60 00 06 60 00 06 60 00 06 60 00 06 60     ...`..`..`..`..`
     17c:	00 3f f8 00 3f f8 00 06 60 00 0c c0 00 3f f8 00     .?..?...`....?..
     18c:	3f f8 00 0c c0 00 0c c0 00 0c c0 00 0c c0 00 0c     ?...............
     19c:	c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     1ac:	00 00 00 00 00 00 00 01 80 00 01 80 00 07 b0 00     ................
     1bc:	0f f0 00 18 70 00 18 70 00 1c 00 00 0f 80 00 07     ....p..p........
     1cc:	e0 00 00 f0 00 18 30 00 1c 30 00 1c 70 00 1f e0     ......0..0..p...
     1dc:	00 1b c0 00 01 80 00 01 80 00 01 80 00 01 80 00     ................
	...
     1fc:	00 00 07 80 00 0f c0 00 1c e0 00 18 60 00 18 60     ............`..`
     20c:	00 1c e0 00 0f f8 00 07 e0 00 1f f0 00 07 38 00     ..............8.
     21c:	06 18 00 06 18 00 07 38 00 03 f0 00 01 e0 00 00     .......8........
	...
     24c:	03 f0 00 07 f0 00 0c 60 00 0c 00 00 0c 00 00 06     .......`........
     25c:	00 00 07 00 00 0f 9c 00 1d fc 00 18 f0 00 18 70     ...............p
     26c:	00 0f fc 00 07 dc 00 00 00 00 00 00 00 00 00 00     ................
	...
     290:	00 03 80 00 03 80 00 03 80 00 01 00 00 01 00 00     ................
     2a0:	01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     2d4:	00 00 00 18 00 00 38 00 00 70 00 00 f0 00 00 e0     ......8..p......
     2e4:	00 00 e0 00 01 c0 00 01 c0 00 01 c0 00 01 c0 00     ................
     2f4:	01 c0 00 01 c0 00 00 e0 00 00 e0 00 00 70 00 00     .............p..
     304:	70 00 00 38 00 00 18 00 00 00 00 00 00 00 00 00     p..8............
	...
     31c:	00 00 18 00 00 1c 00 00 0e 00 00 0e 00 00 07 00     ................
     32c:	00 07 00 00 03 80 00 03 80 00 03 80 00 03 80 00     ................
     33c:	03 80 00 03 80 00 07 00 00 07 00 00 0f 00 00 0e     ................
     34c:	00 00 1c 00 00 18 00 00 00 00 00 00 00 00 00 00     ................
	...
     364:	00 00 01 80 00 01 80 00 01 80 00 1d b8 00 1f f8     ................
     374:	00 07 e0 00 03 c0 00 03 c0 00 06 60 00 06 60 00     ...........`..`.
	...
     3b4:	01 80 00 01 80 00 01 80 00 01 80 00 01 80 00 3f     ...............?
     3c4:	fc 00 3f fc 00 01 80 00 01 80 00 01 80 00 01 80     ..?.............
     3d4:	00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     418:	00 00 00 e0 00 00 c0 00 01 c0 00 01 80 00 01 80     ................
     428:	00 03 00 00 03 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     450:	00 00 00 1f f8 00 1f f8 00 00 00 00 00 00 00 00     ................
	...
     4a8:	00 00 03 c0 00 03 c0 00 03 c0 00 00 00 00 00 00     ................
	...
     4c8:	00 18 00 00 18 00 00 38 00 00 30 00 00 70 00 00     .......8..0..p..
     4d8:	60 00 00 60 00 00 c0 00 00 c0 00 01 80 00 01 80     `..`............
     4e8:	00 03 00 00 03 00 00 06 00 00 06 00 00 0e 00 00     ................
     4f8:	0c 00 00 1c 00 00 18 00 00 18 00 00 00 00 00 00     ................
	...
     514:	00 00 03 c0 00 07 e0 00 0c 30 00 0c 30 00 18 18     .........0..0...
     524:	00 18 18 00 18 18 00 18 18 00 18 18 00 18 18 00     ................
     534:	18 18 00 0c 30 00 0c 30 00 07 e0 00 03 c0 00 00     ....0..0........
	...
     55c:	00 00 00 80 00 07 80 00 1f 80 00 1d 80 00 01 80     ................
     56c:	00 01 80 00 01 80 00 01 80 00 01 80 00 01 80 00     ................
     57c:	01 80 00 01 80 00 01 80 00 1f f8 00 1f f8 00 00     ................
	...
     5a4:	00 00 07 c0 00 1f f0 00 38 30 00 30 18 00 30 18     ........80.0..0.
     5b4:	00 00 18 00 00 30 00 00 60 00 01 c0 00 03 80 00     .....0..`.......
     5c4:	06 00 00 0c 00 00 18 00 00 3f f8 00 3f f8 00 00     .........?..?...
	...
     5ec:	00 00 03 c0 00 0f e0 00 0c 70 00 00 30 00 00 30     .........p..0..0
     5fc:	00 00 60 00 03 c0 00 03 e0 00 00 70 00 00 18 00     ..`........p....
     60c:	00 18 00 00 18 00 18 38 00 1f f0 00 0f c0 00 00     .......8........
	...
     634:	00 00 00 e0 00 01 e0 00 01 e0 00 03 60 00 06 60     ............`..`
     644:	00 06 60 00 0c 60 00 0c 60 00 18 60 00 30 60 00     ..`..`..`..`.0`.
     654:	3f f8 00 3f f8 00 00 60 00 03 f8 00 03 f8 00 00     ?..?...`........
	...
     67c:	00 00 1f f0 00 1f f0 00 18 00 00 18 00 00 18 00     ................
     68c:	00 1b c0 00 1f f0 00 1c 30 00 00 18 00 00 18 00     ........0.......
     69c:	00 18 00 00 18 00 30 30 00 3f f0 00 0f c0 00 00     ......00.?......
	...
     6c4:	00 00 00 f8 00 03 f8 00 07 00 00 0e 00 00 0c 00     ................
     6d4:	00 18 00 00 1b c0 00 1f f0 00 1c 30 00 18 18 00     ...........0....
     6e4:	18 18 00 18 18 00 0c 38 00 0f f0 00 03 e0 00 00     .......8........
	...
     70c:	00 00 1f f8 00 1f f8 00 18 18 00 18 38 00 00 30     ............8..0
     71c:	00 00 30 00 00 70 00 00 60 00 00 60 00 00 e0 00     ..0..p..`..`....
     72c:	00 c0 00 00 c0 00 01 c0 00 01 80 00 01 80 00 00     ................
	...
     754:	00 00 07 e0 00 0f f0 00 1c 38 00 18 18 00 18 18     .........8......
     764:	00 0c 30 00 07 e0 00 07 e0 00 0c 30 00 18 18 00     ..0........0....
     774:	18 18 00 18 18 00 1c 38 00 0f f0 00 07 e0 00 00     .......8........
	...
     79c:	00 00 07 c0 00 0f f0 00 1c 30 00 18 18 00 18 18     .........0......
     7ac:	00 18 18 00 0c 38 00 0f f8 00 03 d8 00 00 18 00     .....8..........
     7bc:	00 30 00 00 70 00 00 e0 00 1f c0 00 1f 00 00 00     .0..p...........
	...
     7f0:	00 00 03 c0 00 03 c0 00 03 c0 00 00 00 00 00 00     ................
	...
     808:	00 00 03 c0 00 03 c0 00 03 c0 00 00 00 00 00 00     ................
	...
     838:	00 00 00 f0 00 00 f0 00 00 f0 00 00 00 00 00 00     ................
	...
     850:	e0 00 01 c0 00 01 80 00 01 80 00 03 00 00 02 00     ................
	...
     87c:	00 1c 00 00 3c 00 00 f0 00 03 c0 00 0f 00 00 3c     ....<..........<
     88c:	00 00 f0 00 00 3c 00 00 0f 00 00 03 c0 00 00 f0     .....<..........
     89c:	00 00 3c 00 00 1c 00 00 00 00 00 00 00 00 00 00     ..<.............
	...
     8cc:	00 7f fc 00 7f fc 00 00 00 00 00 00 00 7f fc 00     ................
     8dc:	7f fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     90c:	70 00 00 78 00 00 1e 00 00 07 80 00 01 e0 00 00     p..x............
     91c:	78 00 00 1e 00 00 78 00 01 e0 00 07 80 00 1e 00     x.....x.........
     92c:	00 78 00 00 70 00 00 00 00 00 00 00 00 00 00 00     .x..p...........
	...
     950:	00 07 c0 00 0f e0 00 18 70 00 18 30 00 18 30 00     ........p..0..0.
     960:	00 70 00 00 e0 00 03 c0 00 03 80 00 03 00 00 00     .p..............
     970:	00 00 00 00 00 07 00 00 07 00 00 00 00 00 00 00     ................
	...
     994:	00 00 03 e0 00 07 f0 00 0e 38 00 0c 18 00 18 78     .........8.....x
     9a4:	00 18 f8 00 19 d8 00 19 98 00 19 98 00 19 98 00     ................
     9b4:	18 f8 00 18 78 00 18 00 00 0c 00 00 0e 18 00 07     ....x...........
     9c4:	f8 00 03 e0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     9e0:	00 1f 80 00 1f c0 00 01 c0 00 03 60 00 03 60 00     ...........`..`.
     9f0:	06 30 00 06 30 00 0c 30 00 0f f8 00 1f f8 00 18     .0..0..0........
     a00:	0c 00 30 0c 00 fc 7f 00 fc 7f 00 00 00 00 00 00     ..0.............
	...
     a28:	00 7f e0 00 7f f0 00 18 38 00 18 18 00 18 18 00     ........8.......
     a38:	18 38 00 1f f0 00 1f f8 00 18 1c 00 18 0c 00 18     .8..............
     a48:	0c 00 18 0c 00 7f f8 00 7f f0 00 00 00 00 00 00     ................
	...
     a70:	00 03 ec 00 0f fc 00 1c 1c 00 18 0c 00 30 0c 00     .............0..
     a80:	30 00 00 30 00 00 30 00 00 30 00 00 30 00 00 18     0..0..0..0..0...
     a90:	0c 00 1c 1c 00 0f f8 00 03 f0 00 00 00 00 00 00     ................
	...
     ab8:	00 7f c0 00 7f f0 00 18 38 00 18 18 00 18 0c 00     ........8.......
     ac8:	18 0c 00 18 0c 00 18 0c 00 18 0c 00 18 0c 00 18     ................
     ad8:	18 00 18 38 00 7f f0 00 7f e0 00 00 00 00 00 00     ...8............
	...
     b00:	00 7f f8 00 7f f8 00 18 18 00 18 18 00 19 98 00     ................
     b10:	19 80 00 1f 80 00 1f 80 00 19 80 00 19 98 00 18     ................
     b20:	18 00 18 18 00 7f f8 00 7f f8 00 00 00 00 00 00     ................
	...
     b48:	00 3f fc 00 3f fc 00 0c 0c 00 0c 0c 00 0c cc 00     .?..?...........
     b58:	0c c0 00 0f c0 00 0f c0 00 0c c0 00 0c c0 00 0c     ................
     b68:	00 00 0c 00 00 3f c0 00 3f c0 00 00 00 00 00 00     .....?..?.......
	...
     b90:	00 03 ec 00 0f fc 00 1c 1c 00 18 0c 00 30 0c 00     .............0..
     ba0:	30 00 00 30 00 00 30 fe 00 30 fe 00 30 0c 00 38     0..0..0..0..0..8
     bb0:	0c 00 1c 1c 00 0f fc 00 03 f0 00 00 00 00 00 00     ................
	...
     bd8:	00 7e 7e 00 7e 7e 00 18 18 00 18 18 00 18 18 00     .~~.~~..........
     be8:	18 18 00 1f f8 00 1f f8 00 18 18 00 18 18 00 18     ................
     bf8:	18 00 18 18 00 7e 7e 00 7e 7e 00 00 00 00 00 00     .....~~.~~......
	...
     c20:	00 1f f8 00 1f f8 00 01 80 00 01 80 00 01 80 00     ................
     c30:	01 80 00 01 80 00 01 80 00 01 80 00 01 80 00 01     ................
     c40:	80 00 01 80 00 1f f8 00 1f f8 00 00 00 00 00 00     ................
	...
     c68:	00 07 fe 00 07 fe 00 00 30 00 00 30 00 00 30 00     ........0..0..0.
     c78:	00 30 00 00 30 00 30 30 00 30 30 00 30 30 00 30     .0..0.00.00.00.0
     c88:	30 00 30 60 00 3f e0 00 0f 80 00 00 00 00 00 00     0.0`.?..........
	...
     cb0:	00 7f 3e 00 7f 3e 00 18 30 00 18 60 00 18 c0 00     ..>..>..0..`....
     cc0:	19 80 00 1b 80 00 1f c0 00 1c e0 00 18 70 00 18     .............p..
     cd0:	30 00 18 38 00 7f 1f 00 7f 1f 00 00 00 00 00 00     0..8............
	...
     cf8:	00 7f 80 00 7f 80 00 0c 00 00 0c 00 00 0c 00 00     ................
     d08:	0c 00 00 0c 00 00 0c 00 00 0c 0c 00 0c 0c 00 0c     ................
     d18:	0c 00 0c 0c 00 7f fc 00 7f fc 00 00 00 00 00 00     ................
	...
     d40:	00 f0 0f 00 f8 1f 00 38 1c 00 3c 3c 00 3c 3c 00     .......8..<<.<<.
     d50:	36 6c 00 36 6c 00 33 cc 00 33 cc 00 31 8c 00 30     6l.6l.3..3..1..0
     d60:	0c 00 30 0c 00 fe 7f 00 fe 7f 00 00 00 00 00 00     ..0.............
	...
     d88:	00 78 fe 00 78 fe 00 1c 18 00 1e 18 00 1f 18 00     .x..x...........
     d98:	1b 18 00 1b 98 00 19 d8 00 18 d8 00 18 f8 00 18     ................
     da8:	78 00 18 38 00 7f 18 00 7f 18 00 00 00 00 00 00     x..8............
	...
     dd0:	00 03 c0 00 0f f0 00 1c 38 00 18 18 00 38 1c 00     ........8....8..
     de0:	30 0c 00 30 0c 00 30 0c 00 30 0c 00 38 1c 00 18     0..0..0..0..8...
     df0:	18 00 1c 38 00 0f f0 00 03 c0 00 00 00 00 00 00     ...8............
	...
     e18:	00 3f f0 00 3f f8 00 0c 1c 00 0c 0c 00 0c 0c 00     .?..?...........
     e28:	0c 0c 00 0c 18 00 0f f8 00 0f e0 00 0c 00 00 0c     ................
     e38:	00 00 0c 00 00 3f c0 00 3f c0 00 00 00 00 00 00     .....?..?.......
	...
     e60:	00 03 c0 00 0f f0 00 1c 38 00 18 18 00 38 1c 00     ........8....8..
     e70:	30 0c 00 30 0c 00 30 0c 00 30 0c 00 38 1c 00 18     0..0..0..0..8...
     e80:	18 00 1c 38 00 0f f0 00 07 c0 00 07 cc 00 0f fc     ...8............
     e90:	00 0c 38 00 00 00 00 00 00 00 00 00 00 00 00 00     ..8.............
	...
     ea8:	00 7f e0 00 7f f0 00 18 38 00 18 18 00 18 18 00     ........8.......
     eb8:	18 38 00 1f f0 00 1f c0 00 18 e0 00 18 70 00 18     .8...........p..
     ec8:	30 00 18 38 00 7f 1e 00 7f 0e 00 00 00 00 00 00     0..8............
	...
     ef0:	00 07 d8 00 0f f8 00 1c 38 00 18 18 00 18 18 00     ........8.......
     f00:	1e 00 00 0f c0 00 03 f0 00 00 78 00 18 18 00 18     ..........x.....
     f10:	18 00 1c 38 00 1f f0 00 1b e0 00 00 00 00 00 00     ...8............
	...
     f38:	00 3f fc 00 3f fc 00 31 8c 00 31 8c 00 31 8c 00     .?..?..1..1..1..
     f48:	31 8c 00 01 80 00 01 80 00 01 80 00 01 80 00 01     1...............
     f58:	80 00 01 80 00 0f f0 00 0f f0 00 00 00 00 00 00     ................
	...
     f80:	00 7e 7e 00 7e 7e 00 18 18 00 18 18 00 18 18 00     .~~.~~..........
     f90:	18 18 00 18 18 00 18 18 00 18 18 00 18 18 00 18     ................
     fa0:	18 00 0c 30 00 0f f0 00 03 c0 00 00 00 00 00 00     ...0............
	...
     fc8:	00 7f 7f 00 7f 7f 00 18 0c 00 0c 18 00 0c 18 00     ................
     fd8:	0c 18 00 06 30 00 06 30 00 03 60 00 03 60 00 03     ....0..0..`..`..
     fe8:	60 00 01 c0 00 01 c0 00 00 80 00 00 00 00 00 00     `...............
	...
    1010:	00 fe 3f 80 fe 3f 80 30 06 00 30 06 00 30 86 00     ..?..?.0..0..0..
    1020:	19 cc 00 19 cc 00 1b 6c 00 1b 6c 00 1e 7c 00 0e     .......l..l..|..
    1030:	38 00 0e 38 00 0c 18 00 0c 18 00 00 00 00 00 00     8..8............
	...
    1058:	00 7e 7e 00 7e 7e 00 18 18 00 0c 30 00 06 60 00     .~~.~~.....0..`.
    1068:	03 c0 00 01 80 00 01 80 00 03 c0 00 06 60 00 0c     .............`..
    1078:	30 00 18 18 00 7e 7e 00 7e 7e 00 00 00 00 00 00     0....~~.~~......
	...
    10a0:	00 7c 7e 00 7c 7e 00 18 18 00 0c 30 00 06 60 00     .|~.|~.....0..`.
    10b0:	06 60 00 03 c0 00 01 80 00 01 80 00 01 80 00 01     .`..............
    10c0:	80 00 01 80 00 0f f0 00 0f f0 00 00 00 00 00 00     ................
	...
    10e8:	00 1f f8 00 1f f8 00 18 18 00 18 30 00 18 60 00     ...........0..`.
    10f8:	18 c0 00 01 80 00 03 00 00 06 18 00 0c 18 00 18     ................
    1108:	18 00 30 18 00 3f f8 00 3f f8 00 00 00 00 00 00     ..0..?..?.......
	...
    112c:	00 00 01 f0 00 01 f0 00 01 80 00 01 80 00 01 80     ................
    113c:	00 01 80 00 01 80 00 01 80 00 01 80 00 01 80 00     ................
    114c:	01 80 00 01 80 00 01 80 00 01 80 00 01 80 00 01     ................
    115c:	80 00 01 f0 00 01 f0 00 00 00 00 00 00 00 00 00     ................
    116c:	00 00 00 00 18 00 00 18 00 00 1c 00 00 0c 00 00     ................
    117c:	0e 00 00 06 00 00 06 00 00 03 00 00 03 00 00 01     ................
    118c:	80 00 01 80 00 00 c0 00 00 c0 00 00 60 00 00 60     ............`..`
    119c:	00 00 70 00 00 30 00 00 38 00 00 18 00 00 18 00     ..p..0..8.......
	...
    11bc:	00 00 0f 80 00 0f 80 00 01 80 00 01 80 00 01 80     ................
    11cc:	00 01 80 00 01 80 00 01 80 00 01 80 00 01 80 00     ................
    11dc:	01 80 00 01 80 00 01 80 00 01 80 00 01 80 00 01     ................
    11ec:	80 00 0f 80 00 0f 80 00 00 00 00 00 00 00 00 00     ................
	...
    1204:	80 00 01 c0 00 03 e0 00 07 70 00 06 30 00 0c 18     .........p..0...
    1214:	00 18 0c 00 10 04 00 00 00 00 00 00 00 00 00 00     ................
	...
    1288:	00 00 ff ff 00 ff ff 00 00 00 00 03 00 00 03 80     ................
    1298:	00 00 e0 00 00 60 00 00 00 00 00 00 00 00 00 00     .....`..........
	...
    12e8:	00 00 0f c0 00 1f e0 00 00 30 00 00 30 00 07 f0     .........0..0...
    12f8:	00 1f f0 00 38 30 00 30 30 00 30 70 00 1f fc 00     ....80.00.0p....
    1308:	0f bc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1324:	00 00 78 00 00 78 00 00 18 00 00 18 00 00 1b e0     ..x..x..........
    1334:	00 1f f8 00 1c 18 00 18 0c 00 18 0c 00 18 0c 00     ................
    1344:	18 0c 00 18 0c 00 1c 18 00 7f f8 00 7b e0 00 00     ............{...
	...
    1378:	00 00 03 ec 00 0f fc 00 1c 1c 00 38 0c 00 30 0c     ...........8..0.
    1388:	00 30 00 00 30 00 00 38 0c 00 1c 1c 00 0f f8 00     .0..0..8........
    1398:	03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    13b4:	00 00 00 78 00 00 78 00 00 18 00 00 18 00 07 d8     ...x..x.........
    13c4:	00 1f f8 00 18 38 00 30 18 00 30 18 00 30 18 00     .....8.0..0..0..
    13d4:	30 18 00 30 18 00 18 38 00 1f fe 00 07 de 00 00     0..0...8........
	...
    1408:	00 00 07 e0 00 1f f8 00 18 18 00 30 0c 00 3f fc     ...........0..?.
    1418:	00 3f fc 00 30 00 00 30 00 00 18 0c 00 1f fc 00     .?..0..0........
    1428:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1444:	00 00 01 fc 00 03 fc 00 06 00 00 06 00 00 3f f8     ..............?.
    1454:	00 3f f8 00 06 00 00 06 00 00 06 00 00 06 00 00     .?..............
    1464:	06 00 00 06 00 00 06 00 00 3f f0 00 3f f0 00 00     .........?..?...
	...
    1498:	00 00 07 de 00 1f fe 00 18 38 00 30 18 00 30 18     .........8.0..0.
    14a8:	00 30 18 00 30 18 00 30 18 00 18 38 00 1f f8 00     .0..0..0...8....
    14b8:	07 d8 00 00 18 00 00 18 00 00 38 00 0f f0 00 0f     ..........8.....
    14c8:	c0 00 00 00 00 00 00 00 00 00 00 00 00 00 78 00     ..............x.
    14d8:	00 78 00 00 18 00 00 18 00 00 1b e0 00 1f f0 00     .x..............
    14e8:	1c 38 00 18 18 00 18 18 00 18 18 00 18 18 00 18     .8..............
    14f8:	18 00 18 18 00 7e 7e 00 7e 7e 00 00 00 00 00 00     .....~~.~~......
	...
    151c:	00 00 01 80 00 01 80 00 00 00 00 00 00 00 1f 80     ................
    152c:	00 1f 80 00 01 80 00 01 80 00 01 80 00 01 80 00     ................
    153c:	01 80 00 01 80 00 01 80 00 3f fc 00 3f fc 00 00     .........?..?...
	...
    1564:	00 00 00 c0 00 00 c0 00 00 00 00 00 00 00 1f f0     ................
    1574:	00 1f f0 00 00 30 00 00 30 00 00 30 00 00 30 00     .....0..0..0..0.
    1584:	00 30 00 00 30 00 00 30 00 00 30 00 00 30 00 00     .0..0..0..0..0..
    1594:	30 00 00 30 00 00 70 00 1f e0 00 1f 80 00 00 00     0..0..p.........
	...
    15ac:	00 00 3c 00 00 3c 00 00 0c 00 00 0c 00 00 0c f8     ..<..<..........
    15bc:	00 0c f8 00 0c c0 00 0d 80 00 0f 80 00 0f 00 00     ................
    15cc:	0f 80 00 0d c0 00 0c e0 00 3c 7c 00 3c 7c 00 00     .........<|.<|..
	...
    15f4:	00 00 1f 80 00 1f 80 00 01 80 00 01 80 00 01 80     ................
    1604:	00 01 80 00 01 80 00 01 80 00 01 80 00 01 80 00     ................
    1614:	01 80 00 01 80 00 01 80 00 3f fc 00 3f fc 00 00     .........?..?...
	...
    1648:	00 00 f7 78 00 ff fc 00 39 cc 00 31 8c 00 31 8c     ...x....9..1..1.
    1658:	00 31 8c 00 31 8c 00 31 8c 00 31 8c 00 fd ef 00     .1..1..1..1.....
    1668:	fd ef 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1690:	00 00 7b e0 00 7f f0 00 1c 38 00 18 18 00 18 18     ..{......8......
    16a0:	00 18 18 00 18 18 00 18 18 00 18 18 00 7e 7e 00     .............~~.
    16b0:	7e 7e 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ~~..............
	...
    16d8:	00 00 03 c0 00 0f f0 00 1c 38 00 38 1c 00 30 0c     .........8.8..0.
    16e8:	00 30 0c 00 30 0c 00 38 1c 00 1c 38 00 0f f0 00     .0..0..8...8....
    16f8:	03 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1720:	00 00 7b e0 00 7f f8 00 1c 18 00 18 0c 00 18 0c     ..{.............
    1730:	00 18 0c 00 18 0c 00 18 0c 00 1c 18 00 1f f8 00     ................
    1740:	1b e0 00 18 00 00 18 00 00 18 00 00 7f 00 00 7f     ................
	...
    1768:	00 00 07 de 00 1f fe 00 18 38 00 30 18 00 30 18     .........8.0..0.
    1778:	00 30 18 00 30 18 00 30 18 00 18 38 00 1f f8 00     .0..0..0...8....
    1788:	07 d8 00 00 18 00 00 18 00 00 18 00 00 fe 00 00     ................
    1798:	fe 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    17b0:	00 00 3e 78 00 3e fc 00 07 cc 00 07 00 00 06 00     ..>x.>..........
    17c0:	00 06 00 00 06 00 00 06 00 00 06 00 00 3f f0 00     .............?..
    17d0:	3f f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
	...
    17f8:	00 00 07 f8 00 0f f8 00 18 18 00 18 18 00 1f 80     ................
    1808:	00 0f f0 00 00 f8 00 18 18 00 18 38 00 1f f0 00     ...........8....
    1818:	1f e0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1834:	00 00 0c 00 00 0c 00 00 0c 00 00 0c 00 00 3f f0     ..............?.
    1844:	00 3f f0 00 0c 00 00 0c 00 00 0c 00 00 0c 00 00     .?..............
    1854:	0c 00 00 0c 00 00 0c 1c 00 07 fc 00 03 f0 00 00     ................
	...
    1888:	00 00 78 78 00 78 78 00 18 18 00 18 18 00 18 18     ..xx.xx.........
    1898:	00 18 18 00 18 18 00 18 18 00 18 38 00 0f fe 00     ...........8....
    18a8:	07 de 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18d0:	00 00 7c 3e 00 7c 3e 00 18 18 00 18 18 00 0c 30     ..|>.|>........0
    18e0:	00 0c 30 00 06 60 00 06 60 00 07 e0 00 03 c0 00     ..0..`..`.......
    18f0:	03 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1918:	00 00 78 3c 00 78 3c 00 31 18 00 33 98 00 33 98     ..x<.x<.1..3..3.
    1928:	00 1a b0 00 1e f0 00 1e f0 00 1c 60 00 0c 60 00     ...........`..`.
    1938:	0c 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .`..............
	...
    1960:	00 00 3e 7c 00 3e 7c 00 0c 30 00 06 60 00 03 c0     ..>|.>|..0..`...
    1970:	00 01 80 00 03 c0 00 06 60 00 0c 30 00 3e 7c 00     ........`..0.>|.
    1980:	3e 7c 00 00 00 00 00 00 00 00 00 00 00 00 00 00     >|..............
	...
    19a8:	00 00 7e 1f 00 7e 1f 00 18 0c 00 0c 18 00 0c 18     ..~..~..........
    19b8:	00 06 30 00 06 30 00 03 60 00 03 e0 00 01 c0 00     ..0..0..`.......
    19c8:	00 c0 00 01 80 00 01 80 00 03 00 00 3f c0 00 3f     ............?..?
    19d8:	c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    19f0:	00 00 1f f8 00 1f f8 00 18 30 00 18 60 00 00 c0     .........0..`...
    1a00:	00 01 80 00 03 00 00 06 18 00 0c 18 00 1f f8 00     ................
    1a10:	1f f8 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a2c:	00 00 00 e0 00 01 e0 00 01 80 00 01 80 00 01 80     ................
    1a3c:	00 01 80 00 01 80 00 01 80 00 03 80 00 07 00 00     ................
    1a4c:	03 80 00 01 80 00 01 80 00 01 80 00 01 80 00 01     ................
    1a5c:	80 00 01 e0 00 00 e0 00 00 00 00 00 00 00 00 00     ................
	...
    1a74:	00 00 01 80 00 01 80 00 01 80 00 01 80 00 01 80     ................
    1a84:	00 01 80 00 01 80 00 01 80 00 01 80 00 01 80 00     ................
    1a94:	01 80 00 01 80 00 01 80 00 01 80 00 01 80 00 01     ................
    1aa4:	80 00 01 80 00 01 80 00 00 00 00 00 00 00 00 00     ................
	...
    1abc:	00 00 07 00 00 07 80 00 01 80 00 01 80 00 01 80     ................
    1acc:	00 01 80 00 01 80 00 01 80 00 01 c0 00 00 e0 00     ................
    1adc:	01 c0 00 01 80 00 01 80 00 01 80 00 01 80 00 01     ................
    1aec:	80 00 07 80 00 07 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b18:	0e 00 00 1f 18 00 3b b8 00 31 f0 00 00 e0 00 00     ......;..1......
	...

00001b48 <port_to_mode_PGM>:
    1b48:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00001b52 <__ctors_end>:
    1b52:	11 24       	eor	r1, r1
    1b54:	1f be       	out	0x3f, r1	; 63
    1b56:	cf ef       	ldi	r28, 0xFF	; 255
    1b58:	d8 e0       	ldi	r29, 0x08	; 8
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	cd bf       	out	0x3d, r28	; 61

00001b5e <__do_copy_data>:
    1b5e:	11 e0       	ldi	r17, 0x01	; 1
    1b60:	a0 e0       	ldi	r26, 0x00	; 0
    1b62:	b1 e0       	ldi	r27, 0x01	; 1
    1b64:	e2 e5       	ldi	r30, 0x52	; 82
    1b66:	fd e2       	ldi	r31, 0x2D	; 45
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <__do_copy_data+0x10>
    1b6a:	05 90       	lpm	r0, Z+
    1b6c:	0d 92       	st	X+, r0
    1b6e:	ae 3f       	cpi	r26, 0xFE	; 254
    1b70:	b1 07       	cpc	r27, r17
    1b72:	d9 f7       	brne	.-10     	; 0x1b6a <__do_copy_data+0xc>

00001b74 <__do_clear_bss>:
    1b74:	22 e0       	ldi	r18, 0x02	; 2
    1b76:	ae ef       	ldi	r26, 0xFE	; 254
    1b78:	b1 e0       	ldi	r27, 0x01	; 1
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <.do_clear_bss_start>

00001b7c <.do_clear_bss_loop>:
    1b7c:	1d 92       	st	X+, r1

00001b7e <.do_clear_bss_start>:
    1b7e:	a8 31       	cpi	r26, 0x18	; 24
    1b80:	b2 07       	cpc	r27, r18
    1b82:	e1 f7       	brne	.-8      	; 0x1b7c <.do_clear_bss_loop>
    1b84:	0e 94 49 16 	call	0x2c92	; 0x2c92 <main>
    1b88:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <_exit>

00001b8c <__bad_interrupt>:
    1b8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001b90 <GPIO_Init>:
#include "DEV_Config.h"

void GPIO_Init()
{
	DDRB |= (1 << DEV_CS_PIN) | (1 << DEV_RST_PIN) | (1 << DEV_BL_PIN);
    1b90:	84 b1       	in	r24, 0x04	; 4
    1b92:	87 60       	ori	r24, 0x07	; 7
    1b94:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DEV_DC_PIN);
    1b96:	8a b1       	in	r24, 0x0a	; 10
    1b98:	80 68       	ori	r24, 0x80	; 128
    1b9a:	8a b9       	out	0x0a, r24	; 10
	analogWrite(DEV_BL_PIN_NUM,140);
    1b9c:	6c e8       	ldi	r22, 0x8C	; 140
    1b9e:	89 e0       	ldi	r24, 0x09	; 9
    1ba0:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <analogWrite>
    1ba4:	08 95       	ret

00001ba6 <Config_Init>:
}
void Config_Init()
{
	GPIO_Init();
    1ba6:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <GPIO_Init>
	
	//Serial
	//Serial.begin(115200);
	UBRR0H = (unsigned char)(0x0000 >> 8); // set the baud rate to 115200
    1baa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)(0x0000);
    1bae:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0); // enable receiver and transmitter
    1bb2:	88 e1       	ldi	r24, 0x18	; 24
    1bb4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // set frame format: 8 data bits, no parity, 1 stop bit
    1bb8:	86 e0       	ldi	r24, 0x06	; 6
    1bba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

void SPI_begin();
uint8_t SPI_transfer(uint8_t data);

inline void SPI_setDataMode() {
	SPCR = (SPCR & ~SPI_MODE_MASK) | SPI_MODE;
    1bbe:	8c b5       	in	r24, 0x2c	; 44
    1bc0:	8c 60       	ori	r24, 0x0C	; 12
    1bc2:	8c bd       	out	0x2c, r24	; 44
}

inline void SPI_setBitOrder() {
	SPCR &= ~(1 << DORD);
    1bc4:	8c b5       	in	r24, 0x2c	; 44
    1bc6:	8f 7d       	andi	r24, 0xDF	; 223
    1bc8:	8c bd       	out	0x2c, r24	; 44
}

inline void SPI_setClockDivider() {
	SPCR = (SPCR & ~SPI_CLOCK_MASK) | (SPI_CLOCK_DIV & SPI_CLOCK_MASK);
    1bca:	8c b5       	in	r24, 0x2c	; 44
    1bcc:	8c 7f       	andi	r24, 0xFC	; 252
    1bce:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((SPI_CLOCK_DIV >> 2) & SPI_2XCLOCK_MASK);
    1bd0:	8d b5       	in	r24, 0x2d	; 45
    1bd2:	81 60       	ori	r24, 0x01	; 1
    1bd4:	8d bd       	out	0x2d, r24	; 45

	//spi
	SPI_setDataMode();
	SPI_setBitOrder();
	SPI_setClockDivider();
	SPI_begin();
    1bd6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <SPI_begin>
    1bda:	08 95       	ret

00001bdc <turnOffPWM>:
		return (PIND & (1 << pin)) >> pin;
		} else {
		// Read from the pin on PORTB
		return (PINB & (1 << (pin - 8))) >> (pin - 8);
	}
}
    1bdc:	8a 31       	cpi	r24, 0x1A	; 26
    1bde:	a9 f0       	breq	.+42     	; 0x1c0a <turnOffPWM+0x2e>
    1be0:	28 f4       	brcc	.+10     	; 0x1bec <turnOffPWM+0x10>
    1be2:	8a 30       	cpi	r24, 0x0A	; 10
    1be4:	51 f0       	breq	.+20     	; 0x1bfa <turnOffPWM+0x1e>
    1be6:	8b 30       	cpi	r24, 0x0B	; 11
    1be8:	61 f0       	breq	.+24     	; 0x1c02 <turnOffPWM+0x26>
    1bea:	08 95       	ret
    1bec:	8a 32       	cpi	r24, 0x2A	; 42
    1bee:	c9 f0       	breq	.+50     	; 0x1c22 <turnOffPWM+0x46>
    1bf0:	8b 32       	cpi	r24, 0x2B	; 43
    1bf2:	e9 f0       	breq	.+58     	; 0x1c2e <turnOffPWM+0x52>
    1bf4:	8b 31       	cpi	r24, 0x1B	; 27
    1bf6:	01 f5       	brne	.+64     	; 0x1c38 <turnOffPWM+0x5c>
    1bf8:	0e c0       	rjmp	.+28     	; 0x1c16 <turnOffPWM+0x3a>
    1bfa:	84 b5       	in	r24, 0x24	; 36
    1bfc:	8f 77       	andi	r24, 0x7F	; 127
    1bfe:	84 bd       	out	0x24, r24	; 36
    1c00:	08 95       	ret
    1c02:	84 b5       	in	r24, 0x24	; 36
    1c04:	8f 7d       	andi	r24, 0xDF	; 223
    1c06:	84 bd       	out	0x24, r24	; 36
    1c08:	08 95       	ret
    1c0a:	e0 e8       	ldi	r30, 0x80	; 128
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	8f 77       	andi	r24, 0x7F	; 127
    1c12:	80 83       	st	Z, r24
    1c14:	08 95       	ret
    1c16:	e0 e8       	ldi	r30, 0x80	; 128
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8f 7d       	andi	r24, 0xDF	; 223
    1c1e:	80 83       	st	Z, r24
    1c20:	08 95       	ret
    1c22:	e0 eb       	ldi	r30, 0xB0	; 176
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	8f 77       	andi	r24, 0x7F	; 127
    1c2a:	80 83       	st	Z, r24
    1c2c:	08 95       	ret
    1c2e:	e0 eb       	ldi	r30, 0xB0	; 176
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	8f 7d       	andi	r24, 0xDF	; 223
    1c36:	80 83       	st	Z, r24
    1c38:	08 95       	ret

00001c3a <digitalPinToPort>:
    1c3a:	88 30       	cpi	r24, 0x08	; 8
    1c3c:	10 f4       	brcc	.+4      	; 0x1c42 <digitalPinToPort+0x8>
    1c3e:	8b b1       	in	r24, 0x0b	; 11
    1c40:	08 95       	ret
    1c42:	88 50       	subi	r24, 0x08	; 8
    1c44:	86 30       	cpi	r24, 0x06	; 6
    1c46:	10 f4       	brcc	.+4      	; 0x1c4c <digitalPinToPort+0x12>
    1c48:	85 b1       	in	r24, 0x05	; 5
    1c4a:	08 95       	ret
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	08 95       	ret

00001c50 <digitalWrite>:


void digitalWrite(uint8_t pin, uint8_t value)
{
    1c50:	cf 93       	push	r28
	uint8_t timer = pgm_read_byte(digital_pin_to_timer_PGM[pin]);
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	f9 01       	movw	r30, r18
    1c58:	e8 59       	subi	r30, 0x98	; 152
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	e0 81       	ld	r30, Z
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	c4 91       	lpm	r28, Z
	uint8_t bit = pgm_read_byte(digital_pin_to_bit_mask_PGM[pin]);
    1c62:	f9 01       	movw	r30, r18
    1c64:	e4 58       	subi	r30, 0x84	; 132
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	e0 81       	ld	r30, Z
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	e4 91       	lpm	r30, Z
	uint8_t port = digitalPinToPort(pin);
    1c6e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <digitalPinToPort>

	if (port == 0) return;
    1c72:	88 23       	and	r24, r24
    1c74:	41 f0       	breq	.+16     	; 0x1c86 <digitalWrite+0x36>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != 0) {
    1c76:	cc 23       	and	r28, r28
    1c78:	19 f0       	breq	.+6      	; 0x1c80 <digitalWrite+0x30>
		turnOffPWM(timer);
    1c7a:	8c 2f       	mov	r24, r28
    1c7c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <turnOffPWM>
	}

	uint8_t oldSREG = SREG;
    1c80:	8f b7       	in	r24, 0x3f	; 63
	cli();
    1c82:	f8 94       	cli
		}
	else {
		port |= bit;
	}

	SREG = oldSREG;
    1c84:	8f bf       	out	0x3f, r24	; 63
    1c86:	cf 91       	pop	r28
    1c88:	08 95       	ret

00001c8a <analogWrite>:
		case 0x2B:  TCCR2A &= ~(1 << COM2B1);    break;
	}
}

void analogWrite(uint8_t pin, uint8_t value) {
	if (value == 0)
    1c8a:	61 11       	cpse	r22, r1
    1c8c:	03 c0       	rjmp	.+6      	; 0x1c94 <analogWrite+0xa>
	{
		digitalWrite(pin, LOW);
    1c8e:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
    1c92:	08 95       	ret
	}
	else if (value == 255)
    1c94:	6f 3f       	cpi	r22, 0xFF	; 255
    1c96:	21 f4       	brne	.+8      	; 0x1ca0 <analogWrite+0x16>
	{
		digitalWrite(pin, HIGH);
    1c98:	61 e0       	ldi	r22, 0x01	; 1
    1c9a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
    1c9e:	08 95       	ret
	}
	else
	{
		switch (pin) {
    1ca0:	89 30       	cpi	r24, 0x09	; 9
    1ca2:	59 f4       	brne	.+22     	; 0x1cba <analogWrite+0x30>
			case DEV_BL_PIN_NUM:
				TCCR1A |= (1 << COM1A1);
    1ca4:	e0 e8       	ldi	r30, 0x80	; 128
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	80 68       	ori	r24, 0x80	; 128
    1cac:	80 83       	st	Z, r24
				OCR1A = value;
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1cb4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				break;
    1cb8:	08 95       	ret
			default:
				if (value < 128) {
    1cba:	66 23       	and	r22, r22
    1cbc:	24 f0       	brlt	.+8      	; 0x1cc6 <analogWrite+0x3c>
					digitalWrite(pin, LOW);
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
    1cc4:	08 95       	ret
				}
				else {
					digitalWrite(pin, HIGH);
    1cc6:	61 e0       	ldi	r22, 0x01	; 1
    1cc8:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
    1ccc:	08 95       	ret

00001cce <Paint_NewImage>:
  for (Y = Ystart; Y < Yend; Y++) {
    for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
      Paint_SetPixel(X, Y, Color);
    }
  }
}
    1cce:	ee ef       	ldi	r30, 0xFE	; 254
    1cd0:	f1 e0       	ldi	r31, 0x01	; 1
    1cd2:	97 83       	std	Z+7, r25	; 0x07
    1cd4:	86 83       	std	Z+6, r24	; 0x06
    1cd6:	71 87       	std	Z+9, r23	; 0x09
    1cd8:	60 87       	std	Z+8, r22	; 0x08
    1cda:	33 87       	std	Z+11, r19	; 0x0b
    1cdc:	22 87       	std	Z+10, r18	; 0x0a
    1cde:	91 8b       	std	Z+17, r25	; 0x11
    1ce0:	80 8b       	std	Z+16, r24	; 0x10
    1ce2:	73 8b       	std	Z+19, r23	; 0x13
    1ce4:	62 8b       	std	Z+18, r22	; 0x12
    1ce6:	55 87       	std	Z+13, r21	; 0x0d
    1ce8:	44 87       	std	Z+12, r20	; 0x0c
    1cea:	17 86       	std	Z+15, r1	; 0x0f
    1cec:	16 86       	std	Z+14, r1	; 0x0e
    1cee:	41 15       	cp	r20, r1
    1cf0:	51 05       	cpc	r21, r1
    1cf2:	19 f0       	breq	.+6      	; 0x1cfa <Paint_NewImage+0x2c>
    1cf4:	44 3b       	cpi	r20, 0xB4	; 180
    1cf6:	51 05       	cpc	r21, r1
    1cf8:	39 f4       	brne	.+14     	; 0x1d08 <Paint_NewImage+0x3a>
    1cfa:	ee ef       	ldi	r30, 0xFE	; 254
    1cfc:	f1 e0       	ldi	r31, 0x01	; 1
    1cfe:	93 83       	std	Z+3, r25	; 0x03
    1d00:	82 83       	std	Z+2, r24	; 0x02
    1d02:	75 83       	std	Z+5, r23	; 0x05
    1d04:	64 83       	std	Z+4, r22	; 0x04
    1d06:	08 95       	ret
    1d08:	ee ef       	ldi	r30, 0xFE	; 254
    1d0a:	f1 e0       	ldi	r31, 0x01	; 1
    1d0c:	73 83       	std	Z+3, r23	; 0x03
    1d0e:	62 83       	std	Z+2, r22	; 0x02
    1d10:	95 83       	std	Z+5, r25	; 0x05
    1d12:	84 83       	std	Z+4, r24	; 0x04
    1d14:	08 95       	ret

00001d16 <Paint_SetPixel>:
    1d16:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_end+0x2>
    1d1a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_end+0x3>
    1d1e:	28 17       	cp	r18, r24
    1d20:	39 07       	cpc	r19, r25
    1d22:	08 f4       	brcc	.+2      	; 0x1d26 <Paint_SetPixel+0x10>
    1d24:	85 c0       	rjmp	.+266    	; 0x1e30 <Paint_SetPixel+0x11a>
    1d26:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__data_end+0x4>
    1d2a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__data_end+0x5>
    1d2e:	26 17       	cp	r18, r22
    1d30:	37 07       	cpc	r19, r23
    1d32:	08 f4       	brcc	.+2      	; 0x1d36 <Paint_SetPixel+0x20>
    1d34:	7d c0       	rjmp	.+250    	; 0x1e30 <Paint_SetPixel+0x11a>
    1d36:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <__data_end+0xc>
    1d3a:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <__data_end+0xd>
    1d3e:	2a 35       	cpi	r18, 0x5A	; 90
    1d40:	31 05       	cpc	r19, r1
    1d42:	59 f0       	breq	.+22     	; 0x1d5a <Paint_SetPixel+0x44>
    1d44:	18 f4       	brcc	.+6      	; 0x1d4c <Paint_SetPixel+0x36>
    1d46:	23 2b       	or	r18, r19
    1d48:	71 f1       	breq	.+92     	; 0x1da6 <Paint_SetPixel+0x90>
    1d4a:	08 95       	ret
    1d4c:	24 3b       	cpi	r18, 0xB4	; 180
    1d4e:	31 05       	cpc	r19, r1
    1d50:	71 f0       	breq	.+28     	; 0x1d6e <Paint_SetPixel+0x58>
    1d52:	2e 30       	cpi	r18, 0x0E	; 14
    1d54:	31 40       	sbci	r19, 0x01	; 1
    1d56:	e9 f0       	breq	.+58     	; 0x1d92 <Paint_SetPixel+0x7c>
    1d58:	08 95       	ret
    1d5a:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__data_end+0x6>
    1d5e:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__data_end+0x7>
    1d62:	26 1b       	sub	r18, r22
    1d64:	37 0b       	sbc	r19, r23
    1d66:	bc 01       	movw	r22, r24
    1d68:	c9 01       	movw	r24, r18
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	1c c0       	rjmp	.+56     	; 0x1da6 <Paint_SetPixel+0x90>
    1d6e:	ee ef       	ldi	r30, 0xFE	; 254
    1d70:	f1 e0       	ldi	r31, 0x01	; 1
    1d72:	26 81       	ldd	r18, Z+6	; 0x06
    1d74:	37 81       	ldd	r19, Z+7	; 0x07
    1d76:	d9 01       	movw	r26, r18
    1d78:	a8 1b       	sub	r26, r24
    1d7a:	b9 0b       	sbc	r27, r25
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	20 85       	ldd	r18, Z+8	; 0x08
    1d82:	31 85       	ldd	r19, Z+9	; 0x09
    1d84:	f9 01       	movw	r30, r18
    1d86:	e6 1b       	sub	r30, r22
    1d88:	f7 0b       	sbc	r31, r23
    1d8a:	bf 01       	movw	r22, r30
    1d8c:	61 50       	subi	r22, 0x01	; 1
    1d8e:	71 09       	sbc	r23, r1
    1d90:	0a c0       	rjmp	.+20     	; 0x1da6 <Paint_SetPixel+0x90>
    1d92:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end+0x8>
    1d96:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x9>
    1d9a:	28 1b       	sub	r18, r24
    1d9c:	39 0b       	sbc	r19, r25
    1d9e:	cb 01       	movw	r24, r22
    1da0:	b9 01       	movw	r22, r18
    1da2:	61 50       	subi	r22, 0x01	; 1
    1da4:	71 09       	sbc	r23, r1
    1da6:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <__data_end+0xe>
    1daa:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <__data_end+0xf>
    1dae:	21 30       	cpi	r18, 0x01	; 1
    1db0:	31 05       	cpc	r19, r1
    1db2:	41 f0       	breq	.+16     	; 0x1dc4 <Paint_SetPixel+0xae>
    1db4:	68 f1       	brcs	.+90     	; 0x1e10 <Paint_SetPixel+0xfa>
    1db6:	22 30       	cpi	r18, 0x02	; 2
    1db8:	31 05       	cpc	r19, r1
    1dba:	71 f0       	breq	.+28     	; 0x1dd8 <Paint_SetPixel+0xc2>
    1dbc:	23 30       	cpi	r18, 0x03	; 3
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	b1 f0       	breq	.+44     	; 0x1dee <Paint_SetPixel+0xd8>
    1dc2:	08 95       	ret
    1dc4:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__data_end+0x6>
    1dc8:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__data_end+0x7>
    1dcc:	d9 01       	movw	r26, r18
    1dce:	a8 1b       	sub	r26, r24
    1dd0:	b9 0b       	sbc	r27, r25
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	1c c0       	rjmp	.+56     	; 0x1e10 <Paint_SetPixel+0xfa>
    1dd8:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end+0x8>
    1ddc:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x9>
    1de0:	f9 01       	movw	r30, r18
    1de2:	e6 1b       	sub	r30, r22
    1de4:	f7 0b       	sbc	r31, r23
    1de6:	bf 01       	movw	r22, r30
    1de8:	61 50       	subi	r22, 0x01	; 1
    1dea:	71 09       	sbc	r23, r1
    1dec:	11 c0       	rjmp	.+34     	; 0x1e10 <Paint_SetPixel+0xfa>
    1dee:	ee ef       	ldi	r30, 0xFE	; 254
    1df0:	f1 e0       	ldi	r31, 0x01	; 1
    1df2:	26 81       	ldd	r18, Z+6	; 0x06
    1df4:	37 81       	ldd	r19, Z+7	; 0x07
    1df6:	d9 01       	movw	r26, r18
    1df8:	a8 1b       	sub	r26, r24
    1dfa:	b9 0b       	sbc	r27, r25
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	20 85       	ldd	r18, Z+8	; 0x08
    1e02:	31 85       	ldd	r19, Z+9	; 0x09
    1e04:	f9 01       	movw	r30, r18
    1e06:	e6 1b       	sub	r30, r22
    1e08:	f7 0b       	sbc	r31, r23
    1e0a:	bf 01       	movw	r22, r30
    1e0c:	61 50       	subi	r22, 0x01	; 1
    1e0e:	71 09       	sbc	r23, r1
    1e10:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__data_end+0x6>
    1e14:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__data_end+0x7>
    1e18:	28 17       	cp	r18, r24
    1e1a:	39 07       	cpc	r19, r25
    1e1c:	48 f0       	brcs	.+18     	; 0x1e30 <Paint_SetPixel+0x11a>
    1e1e:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end+0x8>
    1e22:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x9>
    1e26:	26 17       	cp	r18, r22
    1e28:	37 07       	cpc	r19, r23
    1e2a:	10 f0       	brcs	.+4      	; 0x1e30 <Paint_SetPixel+0x11a>
    1e2c:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <LCD_DrawPaint>
    1e30:	08 95       	ret

00001e32 <Paint_Clear>:
    1e32:	ef 92       	push	r14
    1e34:	ff 92       	push	r15
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	8c 01       	movw	r16, r24
    1e40:	ee ef       	ldi	r30, 0xFE	; 254
    1e42:	f1 e0       	ldi	r31, 0x01	; 1
    1e44:	22 89       	ldd	r18, Z+18	; 0x12
    1e46:	33 89       	ldd	r19, Z+19	; 0x13
    1e48:	40 89       	ldd	r20, Z+16	; 0x10
    1e4a:	51 89       	ldd	r21, Z+17	; 0x11
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_SetWindow>
    1e58:	e1 2c       	mov	r14, r1
    1e5a:	f1 2c       	mov	r15, r1
    1e5c:	11 c0       	rjmp	.+34     	; 0x1e80 <Paint_Clear+0x4e>
    1e5e:	c8 01       	movw	r24, r16
    1e60:	0e 94 14 14 	call	0x2828	; 0x2828 <LCD_WriteData_Word>
    1e64:	21 96       	adiw	r28, 0x01	; 1
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <Paint_Clear+0x3a>
    1e68:	c0 e0       	ldi	r28, 0x00	; 0
    1e6a:	d0 e0       	ldi	r29, 0x00	; 0
    1e6c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <__data_end+0x10>
    1e70:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <__data_end+0x11>
    1e74:	c8 17       	cp	r28, r24
    1e76:	d9 07       	cpc	r29, r25
    1e78:	90 f3       	brcs	.-28     	; 0x1e5e <Paint_Clear+0x2c>
    1e7a:	8f ef       	ldi	r24, 0xFF	; 255
    1e7c:	e8 1a       	sub	r14, r24
    1e7e:	f8 0a       	sbc	r15, r24
    1e80:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end+0x12>
    1e84:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__data_end+0x13>
    1e88:	e8 16       	cp	r14, r24
    1e8a:	f9 06       	cpc	r15, r25
    1e8c:	68 f3       	brcs	.-38     	; 0x1e68 <Paint_Clear+0x36>
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	1f 91       	pop	r17
    1e94:	0f 91       	pop	r16
    1e96:	ff 90       	pop	r15
    1e98:	ef 90       	pop	r14
    1e9a:	08 95       	ret

00001e9c <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
    1e9c:	7f 92       	push	r7
    1e9e:	8f 92       	push	r8
    1ea0:	9f 92       	push	r9
    1ea2:	af 92       	push	r10
    1ea4:	bf 92       	push	r11
    1ea6:	cf 92       	push	r12
    1ea8:	df 92       	push	r13
    1eaa:	ef 92       	push	r14
    1eac:	ff 92       	push	r15
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
    1eb6:	7c 01       	movw	r14, r24
    1eb8:	4b 01       	movw	r8, r22
    1eba:	6a 01       	movw	r12, r20
    1ebc:	72 2e       	mov	r7, r18
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
    1ebe:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end+0x2>
    1ec2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x3>
    1ec6:	8e 15       	cp	r24, r14
    1ec8:	9f 05       	cpc	r25, r15
    1eca:	38 f0       	brcs	.+14     	; 0x1eda <Paint_DrawPoint+0x3e>
    1ecc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end+0x4>
    1ed0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x5>
    1ed4:	86 17       	cp	r24, r22
    1ed6:	97 07       	cpc	r25, r23
    1ed8:	28 f4       	brcc	.+10     	; 0x1ee4 <Paint_DrawPoint+0x48>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
    1eda:	86 e0       	ldi	r24, 0x06	; 6
    1edc:	91 e0       	ldi	r25, 0x01	; 1
    1ede:	0e 94 77 16 	call	0x2cee	; 0x2cee <puts>
        return;
    1ee2:	45 c0       	rjmp	.+138    	; 0x1f6e <Paint_DrawPoint+0xd2>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
    1ee4:	01 30       	cpi	r16, 0x01	; 1
    1ee6:	f1 f0       	breq	.+60     	; 0x1f24 <Paint_DrawPoint+0x88>
    1ee8:	00 e0       	ldi	r16, 0x00	; 0
    1eea:	10 e0       	ldi	r17, 0x00	; 0
    1eec:	3b c0       	rjmp	.+118    	; 0x1f64 <Paint_DrawPoint+0xc8>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
    1eee:	b5 01       	movw	r22, r10
    1ef0:	68 0d       	add	r22, r8
    1ef2:	79 1d       	adc	r23, r9
    1ef4:	27 2d       	mov	r18, r7
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	62 1b       	sub	r22, r18
    1efa:	73 0b       	sbc	r23, r19
    1efc:	a6 01       	movw	r20, r12
    1efe:	c8 01       	movw	r24, r16
    1f00:	8e 0d       	add	r24, r14
    1f02:	9f 1d       	adc	r25, r15
    1f04:	82 1b       	sub	r24, r18
    1f06:	93 0b       	sbc	r25, r19
    1f08:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Paint_SetPixel>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
    1f0c:	8f ef       	ldi	r24, 0xFF	; 255
    1f0e:	a8 1a       	sub	r10, r24
    1f10:	b8 0a       	sbc	r11, r24
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <Paint_DrawPoint+0x7c>
    1f14:	a1 2c       	mov	r10, r1
    1f16:	b1 2c       	mov	r11, r1
    1f18:	ac 16       	cp	r10, r28
    1f1a:	bd 06       	cpc	r11, r29
    1f1c:	44 f3       	brlt	.-48     	; 0x1eee <Paint_DrawPoint+0x52>
        return;
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
    1f1e:	0f 5f       	subi	r16, 0xFF	; 255
    1f20:	1f 4f       	sbci	r17, 0xFF	; 255
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <Paint_DrawPoint+0x8c>
    1f24:	00 e0       	ldi	r16, 0x00	; 0
    1f26:	10 e0       	ldi	r17, 0x00	; 0
    1f28:	c7 2d       	mov	r28, r7
    1f2a:	d0 e0       	ldi	r29, 0x00	; 0
    1f2c:	cc 0f       	add	r28, r28
    1f2e:	dd 1f       	adc	r29, r29
    1f30:	21 97       	sbiw	r28, 0x01	; 1
    1f32:	0c 17       	cp	r16, r28
    1f34:	1d 07       	cpc	r17, r29
    1f36:	74 f3       	brlt	.-36     	; 0x1f14 <Paint_DrawPoint+0x78>
    1f38:	1a c0       	rjmp	.+52     	; 0x1f6e <Paint_DrawPoint+0xd2>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
    1f3a:	be 01       	movw	r22, r28
    1f3c:	68 0d       	add	r22, r8
    1f3e:	79 1d       	adc	r23, r9
    1f40:	61 50       	subi	r22, 0x01	; 1
    1f42:	71 09       	sbc	r23, r1
    1f44:	a6 01       	movw	r20, r12
    1f46:	c8 01       	movw	r24, r16
    1f48:	8e 0d       	add	r24, r14
    1f4a:	9f 1d       	adc	r25, r15
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Paint_SetPixel>
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
    1f52:	21 96       	adiw	r28, 0x01	; 1
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <Paint_DrawPoint+0xbe>
    1f56:	c0 e0       	ldi	r28, 0x00	; 0
    1f58:	d0 e0       	ldi	r29, 0x00	; 0
    1f5a:	ca 15       	cp	r28, r10
    1f5c:	db 05       	cpc	r29, r11
    1f5e:	6c f3       	brlt	.-38     	; 0x1f3a <Paint_DrawPoint+0x9e>
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
    1f60:	0f 5f       	subi	r16, 0xFF	; 255
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	a7 2c       	mov	r10, r7
    1f66:	b1 2c       	mov	r11, r1
    1f68:	0a 15       	cp	r16, r10
    1f6a:	1b 05       	cpc	r17, r11
    1f6c:	a4 f3       	brlt	.-24     	; 0x1f56 <Paint_DrawPoint+0xba>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
            }
        }
    }
}
    1f6e:	df 91       	pop	r29
    1f70:	cf 91       	pop	r28
    1f72:	1f 91       	pop	r17
    1f74:	0f 91       	pop	r16
    1f76:	ff 90       	pop	r15
    1f78:	ef 90       	pop	r14
    1f7a:	df 90       	pop	r13
    1f7c:	cf 90       	pop	r12
    1f7e:	bf 90       	pop	r11
    1f80:	af 90       	pop	r10
    1f82:	9f 90       	pop	r9
    1f84:	8f 90       	pop	r8
    1f86:	7f 90       	pop	r7
    1f88:	08 95       	ret

00001f8a <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
    1f8a:	2f 92       	push	r2
    1f8c:	3f 92       	push	r3
    1f8e:	4f 92       	push	r4
    1f90:	5f 92       	push	r5
    1f92:	6f 92       	push	r6
    1f94:	7f 92       	push	r7
    1f96:	8f 92       	push	r8
    1f98:	9f 92       	push	r9
    1f9a:	af 92       	push	r10
    1f9c:	bf 92       	push	r11
    1f9e:	cf 92       	push	r12
    1fa0:	df 92       	push	r13
    1fa2:	ef 92       	push	r14
    1fa4:	ff 92       	push	r15
    1fa6:	0f 93       	push	r16
    1fa8:	1f 93       	push	r17
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	28 97       	sbiw	r28, 0x08	; 8
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	98 87       	std	Y+8, r25	; 0x08
    1fc0:	8f 83       	std	Y+7, r24	; 0x07
    1fc2:	5b 01       	movw	r10, r22
    1fc4:	5c 83       	std	Y+4, r21	; 0x04
    1fc6:	4b 83       	std	Y+3, r20	; 0x03
    1fc8:	3e 83       	std	Y+6, r19	; 0x06
    1fca:	2d 83       	std	Y+5, r18	; 0x05
    1fcc:	1a 83       	std	Y+2, r17	; 0x02
    1fce:	09 83       	std	Y+1, r16	; 0x01
    1fd0:	de 2c       	mov	r13, r14
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
    1fd2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end+0x2>
    1fd6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x3>
    1fda:	2f 81       	ldd	r18, Y+7	; 0x07
    1fdc:	38 85       	ldd	r19, Y+8	; 0x08
    1fde:	82 17       	cp	r24, r18
    1fe0:	93 07       	cpc	r25, r19
    1fe2:	b8 f0       	brcs	.+46     	; 0x2012 <Paint_DrawLine+0x88>
    1fe4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end+0x4>
    1fe8:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x5>
    1fec:	86 17       	cp	r24, r22
    1fee:	97 07       	cpc	r25, r23
    1ff0:	80 f0       	brcs	.+32     	; 0x2012 <Paint_DrawLine+0x88>
        Xend > Paint.Width || Yend > Paint.Height) {
    1ff2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end+0x2>
    1ff6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x3>
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
    1ffa:	84 17       	cp	r24, r20
    1ffc:	95 07       	cpc	r25, r21
    1ffe:	48 f0       	brcs	.+18     	; 0x2012 <Paint_DrawLine+0x88>
        Xend > Paint.Width || Yend > Paint.Height) {
    2000:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end+0x4>
    2004:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x5>
    2008:	2d 81       	ldd	r18, Y+5	; 0x05
    200a:	3e 81       	ldd	r19, Y+6	; 0x06
    200c:	82 17       	cp	r24, r18
    200e:	93 07       	cpc	r25, r19
    2010:	28 f4       	brcc	.+10     	; 0x201c <Paint_DrawLine+0x92>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
    2012:	86 e4       	ldi	r24, 0x46	; 70
    2014:	91 e0       	ldi	r25, 0x01	; 1
    2016:	0e 94 77 16 	call	0x2cee	; 0x2cee <puts>
        return;
    201a:	80 c0       	rjmp	.+256    	; 0x211c <Paint_DrawLine+0x192>
    }

    UWORD Xpoint = Xstart;
    UWORD Ypoint = Ystart;
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	9c 81       	ldd	r25, Y+4	; 0x04
    2020:	2f 81       	ldd	r18, Y+7	; 0x07
    2022:	38 85       	ldd	r19, Y+8	; 0x08
    2024:	82 1b       	sub	r24, r18
    2026:	93 0b       	sbc	r25, r19
    2028:	12 f0       	brmi	.+4      	; 0x202e <Paint_DrawLine+0xa4>
    202a:	3c 01       	movw	r6, r24
    202c:	06 c0       	rjmp	.+12     	; 0x203a <Paint_DrawLine+0xb0>
    202e:	6f 80       	ldd	r6, Y+7	; 0x07
    2030:	78 84       	ldd	r7, Y+8	; 0x08
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	68 1a       	sub	r6, r24
    2038:	79 0a       	sbc	r7, r25
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
    203a:	8d 81       	ldd	r24, Y+5	; 0x05
    203c:	9e 81       	ldd	r25, Y+6	; 0x06
    203e:	8a 19       	sub	r24, r10
    2040:	9b 09       	sbc	r25, r11
    2042:	18 16       	cp	r1, r24
    2044:	19 06       	cpc	r1, r25
    2046:	14 f0       	brlt	.+4      	; 0x204c <Paint_DrawLine+0xc2>
    2048:	4c 01       	movw	r8, r24
    204a:	05 c0       	rjmp	.+10     	; 0x2056 <Paint_DrawLine+0xcc>
    204c:	45 01       	movw	r8, r10
    204e:	2d 81       	ldd	r18, Y+5	; 0x05
    2050:	3e 81       	ldd	r19, Y+6	; 0x06
    2052:	82 1a       	sub	r8, r18
    2054:	93 0a       	sbc	r9, r19

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
    2056:	8f 81       	ldd	r24, Y+7	; 0x07
    2058:	98 85       	ldd	r25, Y+8	; 0x08
    205a:	2b 81       	ldd	r18, Y+3	; 0x03
    205c:	3c 81       	ldd	r19, Y+4	; 0x04
    205e:	82 17       	cp	r24, r18
    2060:	93 07       	cpc	r25, r19
    2062:	20 f4       	brcc	.+8      	; 0x206c <Paint_DrawLine+0xe2>
    2064:	44 24       	eor	r4, r4
    2066:	43 94       	inc	r4
    2068:	51 2c       	mov	r5, r1
    206a:	03 c0       	rjmp	.+6      	; 0x2072 <Paint_DrawLine+0xe8>
    206c:	44 24       	eor	r4, r4
    206e:	4a 94       	dec	r4
    2070:	54 2c       	mov	r5, r4
    int YAddway = Ystart < Yend ? 1 : -1;
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	a8 16       	cp	r10, r24
    2078:	b9 06       	cpc	r11, r25
    207a:	20 f4       	brcc	.+8      	; 0x2084 <Paint_DrawLine+0xfa>
    207c:	22 24       	eor	r2, r2
    207e:	23 94       	inc	r2
    2080:	31 2c       	mov	r3, r1
    2082:	03 c0       	rjmp	.+6      	; 0x208a <Paint_DrawLine+0x100>
    2084:	22 24       	eor	r2, r2
    2086:	2a 94       	dec	r2
    2088:	32 2c       	mov	r3, r2

    //Cumulative error
    int Esp = dx + dy;
    208a:	73 01       	movw	r14, r6
    208c:	e8 0c       	add	r14, r8
    208e:	f9 1c       	adc	r15, r9
    char Dotted_Len = 0;
    2090:	10 e0       	ldi	r17, 0x00	; 0

    for (;;) {
        Dotted_Len++;
    2092:	1f 5f       	subi	r17, 0xFF	; 255
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
    2094:	31 e0       	ldi	r19, 0x01	; 1
    2096:	c3 12       	cpse	r12, r19
    2098:	15 c0       	rjmp	.+42     	; 0x20c4 <Paint_DrawLine+0x13a>
    209a:	8b ea       	ldi	r24, 0xAB	; 171
    209c:	18 9f       	mul	r17, r24
    209e:	81 2d       	mov	r24, r1
    20a0:	11 24       	eor	r1, r1
    20a2:	86 95       	lsr	r24
    20a4:	98 2f       	mov	r25, r24
    20a6:	99 0f       	add	r25, r25
    20a8:	89 0f       	add	r24, r25
    20aa:	18 13       	cpse	r17, r24
    20ac:	0b c0       	rjmp	.+22     	; 0x20c4 <Paint_DrawLine+0x13a>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
    20ae:	01 e0       	ldi	r16, 0x01	; 1
    20b0:	2d 2d       	mov	r18, r13
    20b2:	4f ef       	ldi	r20, 0xFF	; 255
    20b4:	5f ef       	ldi	r21, 0xFF	; 255
    20b6:	b5 01       	movw	r22, r10
    20b8:	8f 81       	ldd	r24, Y+7	; 0x07
    20ba:	98 85       	ldd	r25, Y+8	; 0x08
    20bc:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
            Dotted_Len = 0;
    20c0:	10 e0       	ldi	r17, 0x00	; 0
    20c2:	09 c0       	rjmp	.+18     	; 0x20d6 <Paint_DrawLine+0x14c>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
    20c4:	01 e0       	ldi	r16, 0x01	; 1
    20c6:	2d 2d       	mov	r18, r13
    20c8:	49 81       	ldd	r20, Y+1	; 0x01
    20ca:	5a 81       	ldd	r21, Y+2	; 0x02
    20cc:	b5 01       	movw	r22, r10
    20ce:	8f 81       	ldd	r24, Y+7	; 0x07
    20d0:	98 85       	ldd	r25, Y+8	; 0x08
    20d2:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
    20d6:	c7 01       	movw	r24, r14
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	88 15       	cp	r24, r8
    20de:	99 05       	cpc	r25, r9
    20e0:	6c f0       	brlt	.+26     	; 0x20fc <Paint_DrawLine+0x172>
            if (Xpoint == Xend)
    20e2:	8f 81       	ldd	r24, Y+7	; 0x07
    20e4:	98 85       	ldd	r25, Y+8	; 0x08
    20e6:	2b 81       	ldd	r18, Y+3	; 0x03
    20e8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ea:	82 17       	cp	r24, r18
    20ec:	93 07       	cpc	r25, r19
    20ee:	b1 f0       	breq	.+44     	; 0x211c <Paint_DrawLine+0x192>
                break;
            Esp += dy;
    20f0:	e8 0c       	add	r14, r8
    20f2:	f9 1c       	adc	r15, r9
            Xpoint += XAddway;
    20f4:	84 0d       	add	r24, r4
    20f6:	95 1d       	adc	r25, r5
    20f8:	98 87       	std	Y+8, r25	; 0x08
    20fa:	8f 83       	std	Y+7, r24	; 0x07
        }
        if (2 * Esp <= dx) {
    20fc:	c7 01       	movw	r24, r14
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	68 16       	cp	r6, r24
    2104:	79 06       	cpc	r7, r25
    2106:	2c f2       	brlt	.-118    	; 0x2092 <Paint_DrawLine+0x108>
            if (Ypoint == Yend)
    2108:	8d 81       	ldd	r24, Y+5	; 0x05
    210a:	9e 81       	ldd	r25, Y+6	; 0x06
    210c:	a8 16       	cp	r10, r24
    210e:	b9 06       	cpc	r11, r25
    2110:	29 f0       	breq	.+10     	; 0x211c <Paint_DrawLine+0x192>
                break;
            Esp += dx;
    2112:	e6 0c       	add	r14, r6
    2114:	f7 1c       	adc	r15, r7
            Ypoint += YAddway;
    2116:	a2 0c       	add	r10, r2
    2118:	b3 1c       	adc	r11, r3
    211a:	bb cf       	rjmp	.-138    	; 0x2092 <Paint_DrawLine+0x108>
        }
    }
}
    211c:	28 96       	adiw	r28, 0x08	; 8
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	ff 90       	pop	r15
    2132:	ef 90       	pop	r14
    2134:	df 90       	pop	r13
    2136:	cf 90       	pop	r12
    2138:	bf 90       	pop	r11
    213a:	af 90       	pop	r10
    213c:	9f 90       	pop	r9
    213e:	8f 90       	pop	r8
    2140:	7f 90       	pop	r7
    2142:	6f 90       	pop	r6
    2144:	5f 90       	pop	r5
    2146:	4f 90       	pop	r4
    2148:	3f 90       	pop	r3
    214a:	2f 90       	pop	r2
    214c:	08 95       	ret

0000214e <Paint_DrawRectangle>:
    Color  ：The color of the Rectangular segment
    Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void Paint_DrawRectangle( UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                          UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Filled )
{
    214e:	4f 92       	push	r4
    2150:	5f 92       	push	r5
    2152:	6f 92       	push	r6
    2154:	7f 92       	push	r7
    2156:	8f 92       	push	r8
    2158:	9f 92       	push	r9
    215a:	af 92       	push	r10
    215c:	bf 92       	push	r11
    215e:	cf 92       	push	r12
    2160:	ef 92       	push	r14
    2162:	ff 92       	push	r15
    2164:	0f 93       	push	r16
    2166:	1f 93       	push	r17
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	ec 01       	movw	r28, r24
    216e:	2b 01       	movw	r4, r22
    2170:	5a 01       	movw	r10, r20
    2172:	49 01       	movw	r8, r18
    2174:	38 01       	movw	r6, r16
    2176:	fe 2c       	mov	r15, r14
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
    2178:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end+0x2>
    217c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x3>
    2180:	8c 17       	cp	r24, r28
    2182:	9d 07       	cpc	r25, r29
    2184:	a8 f0       	brcs	.+42     	; 0x21b0 <Paint_DrawRectangle+0x62>
    2186:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end+0x4>
    218a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x5>
    218e:	86 17       	cp	r24, r22
    2190:	97 07       	cpc	r25, r23
    2192:	70 f0       	brcs	.+28     	; 0x21b0 <Paint_DrawRectangle+0x62>
        Xend > Paint.Width || Yend > Paint.Height) {
    2194:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end+0x2>
    2198:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x3>
    Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void Paint_DrawRectangle( UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                          UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Filled )
{
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
    219c:	84 17       	cp	r24, r20
    219e:	95 07       	cpc	r25, r21
    21a0:	38 f0       	brcs	.+14     	; 0x21b0 <Paint_DrawRectangle+0x62>
        Xend > Paint.Width || Yend > Paint.Height) {
    21a2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end+0x4>
    21a6:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x5>
    21aa:	82 17       	cp	r24, r18
    21ac:	93 07       	cpc	r25, r19
    21ae:	28 f4       	brcc	.+10     	; 0x21ba <Paint_DrawRectangle+0x6c>
        Debug("Input exceeds the normal display range\r\n");
    21b0:	85 e8       	ldi	r24, 0x85	; 133
    21b2:	91 e0       	ldi	r25, 0x01	; 1
    21b4:	0e 94 77 16 	call	0x2cee	; 0x2cee <puts>
        return;
    21b8:	2a c0       	rjmp	.+84     	; 0x220e <Paint_DrawRectangle+0xc0>
    }

    if (Filled ) {
    21ba:	c1 10       	cpse	r12, r1
    21bc:	0d c0       	rjmp	.+26     	; 0x21d8 <Paint_DrawRectangle+0x8a>
    21be:	10 c0       	rjmp	.+32     	; 0x21e0 <Paint_DrawRectangle+0x92>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color ,Line_width, LINE_STYLE_SOLID);
    21c0:	c1 2c       	mov	r12, r1
    21c2:	ef 2c       	mov	r14, r15
    21c4:	83 01       	movw	r16, r6
    21c6:	92 01       	movw	r18, r4
    21c8:	a5 01       	movw	r20, r10
    21ca:	b2 01       	movw	r22, r4
    21cc:	ce 01       	movw	r24, r28
    21ce:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <Paint_DrawLine>
        return;
    }

    if (Filled ) {
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	48 1a       	sub	r4, r24
    21d6:	58 0a       	sbc	r5, r24
    21d8:	48 14       	cp	r4, r8
    21da:	59 04       	cpc	r5, r9
    21dc:	88 f3       	brcs	.-30     	; 0x21c0 <Paint_DrawRectangle+0x72>
    21de:	17 c0       	rjmp	.+46     	; 0x220e <Paint_DrawRectangle+0xc0>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color ,Line_width, LINE_STYLE_SOLID);
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
    21e0:	c1 2c       	mov	r12, r1
    21e2:	9b 01       	movw	r18, r22
    21e4:	ce 01       	movw	r24, r28
    21e6:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
    21ea:	94 01       	movw	r18, r8
    21ec:	ae 01       	movw	r20, r28
    21ee:	b2 01       	movw	r22, r4
    21f0:	ce 01       	movw	r24, r28
    21f2:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
    21f6:	92 01       	movw	r18, r4
    21f8:	a5 01       	movw	r20, r10
    21fa:	b4 01       	movw	r22, r8
    21fc:	c5 01       	movw	r24, r10
    21fe:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
    2202:	94 01       	movw	r18, r8
    2204:	ae 01       	movw	r20, r28
    2206:	b4 01       	movw	r22, r8
    2208:	c5 01       	movw	r24, r10
    220a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <Paint_DrawLine>
    }
}
    220e:	df 91       	pop	r29
    2210:	cf 91       	pop	r28
    2212:	1f 91       	pop	r17
    2214:	0f 91       	pop	r16
    2216:	ff 90       	pop	r15
    2218:	ef 90       	pop	r14
    221a:	cf 90       	pop	r12
    221c:	bf 90       	pop	r11
    221e:	af 90       	pop	r10
    2220:	9f 90       	pop	r9
    2222:	8f 90       	pop	r8
    2224:	7f 90       	pop	r7
    2226:	6f 90       	pop	r6
    2228:	5f 90       	pop	r5
    222a:	4f 90       	pop	r4
    222c:	08 95       	ret

0000222e <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
    222e:	2f 92       	push	r2
    2230:	3f 92       	push	r3
    2232:	4f 92       	push	r4
    2234:	5f 92       	push	r5
    2236:	6f 92       	push	r6
    2238:	7f 92       	push	r7
    223a:	8f 92       	push	r8
    223c:	9f 92       	push	r9
    223e:	af 92       	push	r10
    2240:	bf 92       	push	r11
    2242:	cf 92       	push	r12
    2244:	df 92       	push	r13
    2246:	ef 92       	push	r14
    2248:	ff 92       	push	r15
    224a:	0f 93       	push	r16
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	2a 97       	sbiw	r28, 0x0a	; 10
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	de bf       	out	0x3e, r29	; 62
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	cd bf       	out	0x3d, r28	; 61
    2260:	6c 01       	movw	r12, r24
    2262:	5b 01       	movw	r10, r22
    2264:	29 01       	movw	r4, r18
    2266:	90 2e       	mov	r9, r16
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
    2268:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end+0x2>
    226c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x3>
    2270:	8c 15       	cp	r24, r12
    2272:	9d 05       	cpc	r25, r13
    2274:	38 f0       	brcs	.+14     	; 0x2284 <Paint_DrawCircle+0x56>
    2276:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end+0x4>
    227a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x5>
    227e:	68 17       	cp	r22, r24
    2280:	79 07       	cpc	r23, r25
    2282:	28 f0       	brcs	.+10     	; 0x228e <Paint_DrawCircle+0x60>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
    2284:	85 eb       	ldi	r24, 0xB5	; 181
    2286:	91 e0       	ldi	r25, 0x01	; 1
    2288:	0e 94 77 16 	call	0x2cee	; 0x2cee <puts>
        return;
    228c:	17 c1       	rjmp	.+558    	; 0x24bc <Paint_DrawCircle+0x28e>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
    YCurrent = Radius;
    228e:	3a 01       	movw	r6, r20

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
    2290:	44 0f       	add	r20, r20
    2292:	55 1f       	adc	r21, r21
    2294:	83 e0       	ldi	r24, 0x03	; 3
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	1c 01       	movw	r2, r24
    229a:	24 1a       	sub	r2, r20
    229c:	35 0a       	sbc	r3, r21

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
    229e:	61 e0       	ldi	r22, 0x01	; 1
    22a0:	e6 16       	cp	r14, r22
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <Paint_DrawCircle+0x78>
    22a4:	87 c0       	rjmp	.+270    	; 0x23b4 <Paint_DrawCircle+0x186>
    22a6:	1a 86       	std	Y+10, r1	; 0x0a
    22a8:	19 86       	std	Y+9, r1	; 0x09
    22aa:	02 c1       	rjmp	.+516    	; 0x24b0 <Paint_DrawCircle+0x282>
        while (XCurrent <= YCurrent ) { //Realistic circles
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
    22ac:	89 84       	ldd	r8, Y+9	; 0x09
    22ae:	9a 84       	ldd	r9, Y+10	; 0x0a
    22b0:	8a 0c       	add	r8, r10
    22b2:	9b 1c       	adc	r9, r11
    22b4:	01 e0       	ldi	r16, 0x01	; 1
    22b6:	21 e0       	ldi	r18, 0x01	; 1
    22b8:	a2 01       	movw	r20, r4
    22ba:	b4 01       	movw	r22, r8
    22bc:	c6 01       	movw	r24, r12
    22be:	8e 0d       	add	r24, r14
    22c0:	9f 1d       	adc	r25, r15
    22c2:	9a 83       	std	Y+2, r25	; 0x02
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
    22ca:	21 e0       	ldi	r18, 0x01	; 1
    22cc:	a2 01       	movw	r20, r4
    22ce:	b4 01       	movw	r22, r8
    22d0:	f6 01       	movw	r30, r12
    22d2:	ee 19       	sub	r30, r14
    22d4:	ff 09       	sbc	r31, r15
    22d6:	fc 83       	std	Y+4, r31	; 0x04
    22d8:	eb 83       	std	Y+3, r30	; 0x03
    22da:	cf 01       	movw	r24, r30
    22dc:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
    22e0:	46 01       	movw	r8, r12
    22e2:	69 85       	ldd	r22, Y+9	; 0x09
    22e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    22e6:	86 1a       	sub	r8, r22
    22e8:	97 0a       	sbc	r9, r23
    22ea:	21 e0       	ldi	r18, 0x01	; 1
    22ec:	a2 01       	movw	r20, r4
    22ee:	c5 01       	movw	r24, r10
    22f0:	8e 0d       	add	r24, r14
    22f2:	9f 1d       	adc	r25, r15
    22f4:	98 87       	std	Y+8, r25	; 0x08
    22f6:	8f 83       	std	Y+7, r24	; 0x07
    22f8:	bc 01       	movw	r22, r24
    22fa:	c4 01       	movw	r24, r8
    22fc:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
    2300:	21 e0       	ldi	r18, 0x01	; 1
    2302:	a2 01       	movw	r20, r4
    2304:	f5 01       	movw	r30, r10
    2306:	ee 19       	sub	r30, r14
    2308:	ff 09       	sbc	r31, r15
    230a:	fe 83       	std	Y+6, r31	; 0x06
    230c:	ed 83       	std	Y+5, r30	; 0x05
    230e:	bf 01       	movw	r22, r30
    2310:	c4 01       	movw	r24, r8
    2312:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
    2316:	45 01       	movw	r8, r10
    2318:	69 85       	ldd	r22, Y+9	; 0x09
    231a:	7a 85       	ldd	r23, Y+10	; 0x0a
    231c:	86 1a       	sub	r8, r22
    231e:	97 0a       	sbc	r9, r23
    2320:	21 e0       	ldi	r18, 0x01	; 1
    2322:	a2 01       	movw	r20, r4
    2324:	b4 01       	movw	r22, r8
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
    232e:	21 e0       	ldi	r18, 0x01	; 1
    2330:	a2 01       	movw	r20, r4
    2332:	b4 01       	movw	r22, r8
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
    233c:	89 84       	ldd	r8, Y+9	; 0x09
    233e:	9a 84       	ldd	r9, Y+10	; 0x0a
    2340:	8c 0c       	add	r8, r12
    2342:	9d 1c       	adc	r9, r13
    2344:	21 e0       	ldi	r18, 0x01	; 1
    2346:	a2 01       	movw	r20, r4
    2348:	6d 81       	ldd	r22, Y+5	; 0x05
    234a:	7e 81       	ldd	r23, Y+6	; 0x06
    234c:	c4 01       	movw	r24, r8
    234e:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
    2352:	21 e0       	ldi	r18, 0x01	; 1
    2354:	a2 01       	movw	r20, r4
    2356:	6f 81       	ldd	r22, Y+7	; 0x07
    2358:	78 85       	ldd	r23, Y+8	; 0x08
    235a:	c4 01       	movw	r24, r8
    235c:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
    int16_t Esp = 3 - (Radius << 1 );

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
        while (XCurrent <= YCurrent ) { //Realistic circles
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
    2360:	89 85       	ldd	r24, Y+9	; 0x09
    2362:	9a 85       	ldd	r25, Y+10	; 0x0a
    2364:	01 96       	adiw	r24, 0x01	; 1
    2366:	9a 87       	std	Y+10, r25	; 0x0a
    2368:	89 87       	std	Y+9, r24	; 0x09
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <Paint_DrawCircle+0x142>
    236c:	fa 86       	std	Y+10, r15	; 0x0a
    236e:	e9 86       	std	Y+9, r14	; 0x09
    2370:	e9 85       	ldd	r30, Y+9	; 0x09
    2372:	fa 85       	ldd	r31, Y+10	; 0x0a
    2374:	6e 16       	cp	r6, r30
    2376:	7f 06       	cpc	r7, r31
    2378:	0c f0       	brlt	.+2      	; 0x237c <Paint_DrawCircle+0x14e>
    237a:	98 cf       	rjmp	.-208    	; 0x22ac <Paint_DrawCircle+0x7e>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            }
            if (Esp < 0 )
    237c:	33 20       	and	r3, r3
    237e:	4c f4       	brge	.+18     	; 0x2392 <Paint_DrawCircle+0x164>
                Esp += 4 * XCurrent + 6;
    2380:	c7 01       	movw	r24, r14
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	06 96       	adiw	r24, 0x06	; 6
    238c:	28 0e       	add	r2, r24
    238e:	39 1e       	adc	r3, r25
    2390:	0d c0       	rjmp	.+26     	; 0x23ac <Paint_DrawCircle+0x17e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
    2392:	c7 01       	movw	r24, r14
    2394:	86 19       	sub	r24, r6
    2396:	97 09       	sbc	r25, r7
    2398:	88 0f       	add	r24, r24
    239a:	99 1f       	adc	r25, r25
    239c:	88 0f       	add	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	0a 96       	adiw	r24, 0x0a	; 10
    23a2:	28 0e       	add	r2, r24
    23a4:	39 1e       	adc	r3, r25
                YCurrent --;
    23a6:	f1 e0       	ldi	r31, 0x01	; 1
    23a8:	6f 1a       	sub	r6, r31
    23aa:	71 08       	sbc	r7, r1
            }
            XCurrent ++;
    23ac:	6f ef       	ldi	r22, 0xFF	; 255
    23ae:	e6 1a       	sub	r14, r22
    23b0:	f6 0a       	sbc	r15, r22
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <Paint_DrawCircle+0x18a>
    23b4:	e1 2c       	mov	r14, r1
    23b6:	f1 2c       	mov	r15, r1
    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
        while (XCurrent <= YCurrent ) { //Realistic circles
    23b8:	6e 14       	cp	r6, r14
    23ba:	7f 04       	cpc	r7, r15
    23bc:	bc f6       	brge	.-82     	; 0x236c <Paint_DrawCircle+0x13e>
    23be:	7e c0       	rjmp	.+252    	; 0x24bc <Paint_DrawCircle+0x28e>
            }
            XCurrent ++;
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
    23c0:	01 e0       	ldi	r16, 0x01	; 1
    23c2:	29 2d       	mov	r18, r9
    23c4:	a2 01       	movw	r20, r4
    23c6:	75 01       	movw	r14, r10
    23c8:	e6 0c       	add	r14, r6
    23ca:	f7 1c       	adc	r15, r7
    23cc:	b7 01       	movw	r22, r14
    23ce:	89 85       	ldd	r24, Y+9	; 0x09
    23d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d2:	8c 0d       	add	r24, r12
    23d4:	9d 1d       	adc	r25, r13
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
    23da:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
    23de:	29 2d       	mov	r18, r9
    23e0:	a2 01       	movw	r20, r4
    23e2:	b7 01       	movw	r22, r14
    23e4:	f6 01       	movw	r30, r12
    23e6:	89 85       	ldd	r24, Y+9	; 0x09
    23e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ea:	e8 1b       	sub	r30, r24
    23ec:	f9 0b       	sbc	r31, r25
    23ee:	fc 83       	std	Y+4, r31	; 0x04
    23f0:	eb 83       	std	Y+3, r30	; 0x03
    23f2:	cf 01       	movw	r24, r30
    23f4:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
    23f8:	29 2d       	mov	r18, r9
    23fa:	a2 01       	movw	r20, r4
    23fc:	e9 85       	ldd	r30, Y+9	; 0x09
    23fe:	fa 85       	ldd	r31, Y+10	; 0x0a
    2400:	ea 0d       	add	r30, r10
    2402:	fb 1d       	adc	r31, r11
    2404:	f8 87       	std	Y+8, r31	; 0x08
    2406:	ef 83       	std	Y+7, r30	; 0x07
    2408:	bf 01       	movw	r22, r30
    240a:	76 01       	movw	r14, r12
    240c:	e6 18       	sub	r14, r6
    240e:	f7 08       	sbc	r15, r7
    2410:	c7 01       	movw	r24, r14
    2412:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
    2416:	29 2d       	mov	r18, r9
    2418:	a2 01       	movw	r20, r4
    241a:	b5 01       	movw	r22, r10
    241c:	89 85       	ldd	r24, Y+9	; 0x09
    241e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2420:	68 1b       	sub	r22, r24
    2422:	79 0b       	sbc	r23, r25
    2424:	7e 83       	std	Y+6, r23	; 0x06
    2426:	6d 83       	std	Y+5, r22	; 0x05
    2428:	c7 01       	movw	r24, r14
    242a:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
    242e:	29 2d       	mov	r18, r9
    2430:	a2 01       	movw	r20, r4
    2432:	75 01       	movw	r14, r10
    2434:	e6 18       	sub	r14, r6
    2436:	f7 08       	sbc	r15, r7
    2438:	b7 01       	movw	r22, r14
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	9c 81       	ldd	r25, Y+4	; 0x04
    243e:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
    2442:	29 2d       	mov	r18, r9
    2444:	a2 01       	movw	r20, r4
    2446:	b7 01       	movw	r22, r14
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
    2450:	29 2d       	mov	r18, r9
    2452:	a2 01       	movw	r20, r4
    2454:	6d 81       	ldd	r22, Y+5	; 0x05
    2456:	7e 81       	ldd	r23, Y+6	; 0x06
    2458:	76 01       	movw	r14, r12
    245a:	e6 0c       	add	r14, r6
    245c:	f7 1c       	adc	r15, r7
    245e:	c7 01       	movw	r24, r14
    2460:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
    2464:	29 2d       	mov	r18, r9
    2466:	a2 01       	movw	r20, r4
    2468:	6f 81       	ldd	r22, Y+7	; 0x07
    246a:	78 85       	ldd	r23, Y+8	; 0x08
    246c:	c7 01       	movw	r24, r14
    246e:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <Paint_DrawPoint>

            if (Esp < 0 )
    2472:	33 20       	and	r3, r3
    2474:	54 f4       	brge	.+20     	; 0x248a <Paint_DrawCircle+0x25c>
                Esp += 4 * XCurrent + 6;
    2476:	89 85       	ldd	r24, Y+9	; 0x09
    2478:	9a 85       	ldd	r25, Y+10	; 0x0a
    247a:	88 0f       	add	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	06 96       	adiw	r24, 0x06	; 6
    2484:	28 0e       	add	r2, r24
    2486:	39 1e       	adc	r3, r25
    2488:	0e c0       	rjmp	.+28     	; 0x24a6 <Paint_DrawCircle+0x278>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
    248a:	89 85       	ldd	r24, Y+9	; 0x09
    248c:	9a 85       	ldd	r25, Y+10	; 0x0a
    248e:	86 19       	sub	r24, r6
    2490:	97 09       	sbc	r25, r7
    2492:	88 0f       	add	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	88 0f       	add	r24, r24
    2498:	99 1f       	adc	r25, r25
    249a:	0a 96       	adiw	r24, 0x0a	; 10
    249c:	28 0e       	add	r2, r24
    249e:	39 1e       	adc	r3, r25
                YCurrent --;
    24a0:	91 e0       	ldi	r25, 0x01	; 1
    24a2:	69 1a       	sub	r6, r25
    24a4:	71 08       	sbc	r7, r1
            }
            XCurrent ++;
    24a6:	e9 85       	ldd	r30, Y+9	; 0x09
    24a8:	fa 85       	ldd	r31, Y+10	; 0x0a
    24aa:	31 96       	adiw	r30, 0x01	; 1
    24ac:	fa 87       	std	Y+10, r31	; 0x0a
    24ae:	e9 87       	std	Y+9, r30	; 0x09
                YCurrent --;
            }
            XCurrent ++;
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
    24b0:	69 85       	ldd	r22, Y+9	; 0x09
    24b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    24b4:	66 16       	cp	r6, r22
    24b6:	77 06       	cpc	r7, r23
    24b8:	0c f0       	brlt	.+2      	; 0x24bc <Paint_DrawCircle+0x28e>
    24ba:	82 cf       	rjmp	.-252    	; 0x23c0 <Paint_DrawCircle+0x192>
                YCurrent --;
            }
            XCurrent ++;
        }
    }
}
    24bc:	2a 96       	adiw	r28, 0x0a	; 10
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	0f 91       	pop	r16
    24ce:	ff 90       	pop	r15
    24d0:	ef 90       	pop	r14
    24d2:	df 90       	pop	r13
    24d4:	cf 90       	pop	r12
    24d6:	bf 90       	pop	r11
    24d8:	af 90       	pop	r10
    24da:	9f 90       	pop	r9
    24dc:	8f 90       	pop	r8
    24de:	7f 90       	pop	r7
    24e0:	6f 90       	pop	r6
    24e2:	5f 90       	pop	r5
    24e4:	4f 90       	pop	r4
    24e6:	3f 90       	pop	r3
    24e8:	2f 90       	pop	r2
    24ea:	08 95       	ret

000024ec <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
    24ec:	4f 92       	push	r4
    24ee:	5f 92       	push	r5
    24f0:	6f 92       	push	r6
    24f2:	7f 92       	push	r7
    24f4:	8f 92       	push	r8
    24f6:	9f 92       	push	r9
    24f8:	af 92       	push	r10
    24fa:	bf 92       	push	r11
    24fc:	cf 92       	push	r12
    24fe:	df 92       	push	r13
    2500:	ef 92       	push	r14
    2502:	ff 92       	push	r15
    2504:	0f 93       	push	r16
    2506:	1f 93       	push	r17
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29

  UWORD Page, Column;

  if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
    250c:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__data_end+0x2>
    2510:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__data_end+0x3>
    2514:	e8 17       	cp	r30, r24
    2516:	f9 07       	cpc	r31, r25
    2518:	08 f4       	brcc	.+2      	; 0x251c <Paint_DrawChar+0x30>
    251a:	ab c0       	rjmp	.+342    	; 0x2672 <Paint_DrawChar+0x186>
    251c:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_end+0x4>
    2520:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <__data_end+0x5>
    2524:	e6 17       	cp	r30, r22
    2526:	f7 07       	cpc	r31, r23
    2528:	08 f4       	brcc	.+2      	; 0x252c <Paint_DrawChar+0x40>
    252a:	a3 c0       	rjmp	.+326    	; 0x2672 <Paint_DrawChar+0x186>
    //Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
    return;
  }
  uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	40 52       	subi	r20, 0x20	; 32
    2530:	51 09       	sbc	r21, r1
    2532:	f9 01       	movw	r30, r18
    2534:	a4 81       	ldd	r26, Z+4	; 0x04
    2536:	b5 81       	ldd	r27, Z+5	; 0x05
    2538:	4a 9f       	mul	r20, r26
    253a:	f0 01       	movw	r30, r0
    253c:	4b 9f       	mul	r20, r27
    253e:	f0 0d       	add	r31, r0
    2540:	5a 9f       	mul	r21, r26
    2542:	f0 0d       	add	r31, r0
    2544:	11 24       	eor	r1, r1
    2546:	d9 01       	movw	r26, r18
    2548:	12 96       	adiw	r26, 0x02	; 2
    254a:	4d 91       	ld	r20, X+
    254c:	5c 91       	ld	r21, X
    254e:	13 97       	sbiw	r26, 0x03	; 3
    2550:	da 01       	movw	r26, r20
    2552:	b6 95       	lsr	r27
    2554:	a7 95       	ror	r26
    2556:	b6 95       	lsr	r27
    2558:	a7 95       	ror	r26
    255a:	b6 95       	lsr	r27
    255c:	a7 95       	ror	r26
    255e:	47 70       	andi	r20, 0x07	; 7
    2560:	55 27       	eor	r21, r21
    2562:	41 15       	cp	r20, r1
    2564:	51 05       	cpc	r21, r1
    2566:	11 f0       	breq	.+4      	; 0x256c <Paint_DrawChar+0x80>
    2568:	41 e0       	ldi	r20, 0x01	; 1
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	27 01       	movw	r4, r14
    256e:	69 01       	movw	r12, r18
    2570:	4b 01       	movw	r8, r22
    2572:	3c 01       	movw	r6, r24
    2574:	4a 0f       	add	r20, r26
    2576:	5b 1f       	adc	r21, r27
    2578:	e4 9f       	mul	r30, r20
    257a:	c0 01       	movw	r24, r0
    257c:	e5 9f       	mul	r30, r21
    257e:	90 0d       	add	r25, r0
    2580:	f4 9f       	mul	r31, r20
    2582:	90 0d       	add	r25, r0
    2584:	11 24       	eor	r1, r1
  const unsigned char *ptr = &Font->table[Char_Offset];
    2586:	f9 01       	movw	r30, r18
    2588:	e0 80       	ld	r14, Z
    258a:	f1 80       	ldd	r15, Z+1	; 0x01
    258c:	e8 0e       	add	r14, r24
    258e:	f9 1e       	adc	r15, r25

  for ( Page = 0; Page < Font->Height; Page ++ ) {
    2590:	a1 2c       	mov	r10, r1
    2592:	b1 2c       	mov	r11, r1
    2594:	66 c0       	rjmp	.+204    	; 0x2662 <Paint_DrawChar+0x176>
    for ( Column = 0; Column < Font->Width; Column ++ ) {

      //To determine whether the font background color and screen background color is consistent
      if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
    2596:	0f 3f       	cpi	r16, 0xFF	; 255
    2598:	ff ef       	ldi	r31, 0xFF	; 255
    259a:	1f 07       	cpc	r17, r31
    259c:	e9 f4       	brne	.+58     	; 0x25d8 <Paint_DrawChar+0xec>
        if (pgm_read_byte(ptr) & (0x80 >> (Column % 8)))
    259e:	f7 01       	movw	r30, r14
    25a0:	44 91       	lpm	r20, Z
    25a2:	9e 01       	movw	r18, r28
    25a4:	27 70       	andi	r18, 0x07	; 7
    25a6:	33 27       	eor	r19, r19
    25a8:	80 e8       	ldi	r24, 0x80	; 128
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	bc 01       	movw	r22, r24
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <Paint_DrawChar+0xc8>
    25b0:	75 95       	asr	r23
    25b2:	67 95       	ror	r22
    25b4:	2a 95       	dec	r18
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <Paint_DrawChar+0xc4>
    25b8:	84 2f       	mov	r24, r20
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	86 23       	and	r24, r22
    25be:	97 23       	and	r25, r23
    25c0:	89 2b       	or	r24, r25
    25c2:	81 f1       	breq	.+96     	; 0x2624 <Paint_DrawChar+0x138>
          Paint_SetPixel (Xpoint + Column, Ypoint + Page, Color_Foreground );
    25c4:	a2 01       	movw	r20, r4
    25c6:	b5 01       	movw	r22, r10
    25c8:	68 0d       	add	r22, r8
    25ca:	79 1d       	adc	r23, r9
    25cc:	ce 01       	movw	r24, r28
    25ce:	86 0d       	add	r24, r6
    25d0:	97 1d       	adc	r25, r7
    25d2:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Paint_SetPixel>
    25d6:	26 c0       	rjmp	.+76     	; 0x2624 <Paint_DrawChar+0x138>
      } else {
        if (pgm_read_byte(ptr) & (0x80 >> (Column % 8))) {
    25d8:	f7 01       	movw	r30, r14
    25da:	44 91       	lpm	r20, Z
    25dc:	9e 01       	movw	r18, r28
    25de:	27 70       	andi	r18, 0x07	; 7
    25e0:	33 27       	eor	r19, r19
    25e2:	80 e8       	ldi	r24, 0x80	; 128
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	bc 01       	movw	r22, r24
    25e8:	02 c0       	rjmp	.+4      	; 0x25ee <Paint_DrawChar+0x102>
    25ea:	75 95       	asr	r23
    25ec:	67 95       	ror	r22
    25ee:	2a 95       	dec	r18
    25f0:	e2 f7       	brpl	.-8      	; 0x25ea <Paint_DrawChar+0xfe>
    25f2:	84 2f       	mov	r24, r20
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	86 23       	and	r24, r22
    25f8:	97 23       	and	r25, r23
    25fa:	89 2b       	or	r24, r25
    25fc:	51 f0       	breq	.+20     	; 0x2612 <Paint_DrawChar+0x126>
          Paint_SetPixel (Xpoint + Column, Ypoint + Page, Color_Foreground );
    25fe:	a2 01       	movw	r20, r4
    2600:	b5 01       	movw	r22, r10
    2602:	68 0d       	add	r22, r8
    2604:	79 1d       	adc	r23, r9
    2606:	ce 01       	movw	r24, r28
    2608:	86 0d       	add	r24, r6
    260a:	97 1d       	adc	r25, r7
    260c:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Paint_SetPixel>
    2610:	09 c0       	rjmp	.+18     	; 0x2624 <Paint_DrawChar+0x138>
        } else {
          Paint_SetPixel (Xpoint + Column, Ypoint + Page, Color_Background );
    2612:	a8 01       	movw	r20, r16
    2614:	b5 01       	movw	r22, r10
    2616:	68 0d       	add	r22, r8
    2618:	79 1d       	adc	r23, r9
    261a:	ce 01       	movw	r24, r28
    261c:	86 0d       	add	r24, r6
    261e:	97 1d       	adc	r25, r7
    2620:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Paint_SetPixel>
        }
      }
      //One pixel is 8 bits
      if (Column % 8 == 7) {
    2624:	ce 01       	movw	r24, r28
    2626:	87 70       	andi	r24, 0x07	; 7
    2628:	99 27       	eor	r25, r25
    262a:	07 97       	sbiw	r24, 0x07	; 7
    262c:	19 f4       	brne	.+6      	; 0x2634 <Paint_DrawChar+0x148>
        ptr++;
    262e:	7f ef       	ldi	r23, 0xFF	; 255
    2630:	e7 1a       	sub	r14, r23
    2632:	f7 0a       	sbc	r15, r23
  }
  uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
  const unsigned char *ptr = &Font->table[Char_Offset];

  for ( Page = 0; Page < Font->Height; Page ++ ) {
    for ( Column = 0; Column < Font->Width; Column ++ ) {
    2634:	21 96       	adiw	r28, 0x01	; 1
    2636:	02 c0       	rjmp	.+4      	; 0x263c <Paint_DrawChar+0x150>
    2638:	c0 e0       	ldi	r28, 0x00	; 0
    263a:	d0 e0       	ldi	r29, 0x00	; 0
    263c:	d6 01       	movw	r26, r12
    263e:	12 96       	adiw	r26, 0x02	; 2
    2640:	8d 91       	ld	r24, X+
    2642:	9c 91       	ld	r25, X
    2644:	13 97       	sbiw	r26, 0x03	; 3
    2646:	c8 17       	cp	r28, r24
    2648:	d9 07       	cpc	r29, r25
    264a:	08 f4       	brcc	.+2      	; 0x264e <Paint_DrawChar+0x162>
    264c:	a4 cf       	rjmp	.-184    	; 0x2596 <Paint_DrawChar+0xaa>
      //One pixel is 8 bits
      if (Column % 8 == 7) {
        ptr++;
      }
    }/* Write a line */
    if (Font->Width % 8 != 0) {
    264e:	87 70       	andi	r24, 0x07	; 7
    2650:	99 27       	eor	r25, r25
    2652:	89 2b       	or	r24, r25
    2654:	19 f0       	breq	.+6      	; 0x265c <Paint_DrawChar+0x170>
      ptr++;
    2656:	bf ef       	ldi	r27, 0xFF	; 255
    2658:	eb 1a       	sub	r14, r27
    265a:	fb 0a       	sbc	r15, r27
    return;
  }
  uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
  const unsigned char *ptr = &Font->table[Char_Offset];

  for ( Page = 0; Page < Font->Height; Page ++ ) {
    265c:	ef ef       	ldi	r30, 0xFF	; 255
    265e:	ae 1a       	sub	r10, r30
    2660:	be 0a       	sbc	r11, r30
    2662:	d6 01       	movw	r26, r12
    2664:	14 96       	adiw	r26, 0x04	; 4
    2666:	8d 91       	ld	r24, X+
    2668:	9c 91       	ld	r25, X
    266a:	15 97       	sbiw	r26, 0x05	; 5
    266c:	a8 16       	cp	r10, r24
    266e:	b9 06       	cpc	r11, r25
    2670:	18 f3       	brcs	.-58     	; 0x2638 <Paint_DrawChar+0x14c>
    }/* Write a line */
    if (Font->Width % 8 != 0) {
      ptr++;
    }
  }/* Write all */
}
    2672:	df 91       	pop	r29
    2674:	cf 91       	pop	r28
    2676:	1f 91       	pop	r17
    2678:	0f 91       	pop	r16
    267a:	ff 90       	pop	r15
    267c:	ef 90       	pop	r14
    267e:	df 90       	pop	r13
    2680:	cf 90       	pop	r12
    2682:	bf 90       	pop	r11
    2684:	af 90       	pop	r10
    2686:	9f 90       	pop	r9
    2688:	8f 90       	pop	r8
    268a:	7f 90       	pop	r7
    268c:	6f 90       	pop	r6
    268e:	5f 90       	pop	r5
    2690:	4f 90       	pop	r4
    2692:	08 95       	ret

00002694 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
    2694:	2f 92       	push	r2
    2696:	3f 92       	push	r3
    2698:	4f 92       	push	r4
    269a:	5f 92       	push	r5
    269c:	6f 92       	push	r6
    269e:	7f 92       	push	r7
    26a0:	8f 92       	push	r8
    26a2:	9f 92       	push	r9
    26a4:	af 92       	push	r10
    26a6:	bf 92       	push	r11
    26a8:	cf 92       	push	r12
    26aa:	df 92       	push	r13
    26ac:	ef 92       	push	r14
    26ae:	ff 92       	push	r15
    26b0:	0f 93       	push	r16
    26b2:	1f 93       	push	r17
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <Paint_DrawString_EN+0x26>
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <Paint_DrawString_EN+0x28>
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	1c 01       	movw	r2, r24
    26c2:	4b 01       	movw	r8, r22
    26c4:	3a 01       	movw	r6, r20
    26c6:	69 01       	movw	r12, r18
    26c8:	28 01       	movw	r4, r16
    26ca:	fa 82       	std	Y+2, r15	; 0x02
    26cc:	e9 82       	std	Y+1, r14	; 0x01
  UWORD Xpoint = Xstart;
  UWORD Ypoint = Ystart;

  if (Xstart > Paint.Width || Ystart > Paint.Height) {
    26ce:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end+0x2>
    26d2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x3>
    26d6:	82 15       	cp	r24, r2
    26d8:	93 05       	cpc	r25, r3
    26da:	08 f4       	brcc	.+2      	; 0x26de <Paint_DrawString_EN+0x4a>
    26dc:	48 c0       	rjmp	.+144    	; 0x276e <Paint_DrawString_EN+0xda>
    26de:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end+0x4>
    26e2:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x5>
    26e6:	86 17       	cp	r24, r22
    26e8:	97 07       	cpc	r25, r23
    26ea:	08 f4       	brcc	.+2      	; 0x26ee <Paint_DrawString_EN+0x5a>
    26ec:	40 c0       	rjmp	.+128    	; 0x276e <Paint_DrawString_EN+0xda>
    26ee:	5b 01       	movw	r10, r22
    26f0:	3c 82       	std	Y+4, r3	; 0x04
    26f2:	2b 82       	std	Y+3, r2	; 0x03
    26f4:	38 c0       	rjmp	.+112    	; 0x2766 <Paint_DrawString_EN+0xd2>
    return;
  }

  while (* pString != '\0') {
    //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
    if ((Xpoint + Font->Width ) > Paint.Width ) {
    26f6:	f6 01       	movw	r30, r12
    26f8:	82 81       	ldd	r24, Z+2	; 0x02
    26fa:	93 81       	ldd	r25, Z+3	; 0x03
    26fc:	2b 81       	ldd	r18, Y+3	; 0x03
    26fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2700:	82 0f       	add	r24, r18
    2702:	93 1f       	adc	r25, r19
    2704:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_end+0x2>
    2708:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_end+0x3>
    270c:	28 17       	cp	r18, r24
    270e:	39 07       	cpc	r19, r25
    2710:	30 f4       	brcc	.+12     	; 0x271e <Paint_DrawString_EN+0x8a>
      Xpoint = Xstart;
      Ypoint += Font->Height;
    2712:	84 81       	ldd	r24, Z+4	; 0x04
    2714:	95 81       	ldd	r25, Z+5	; 0x05
    2716:	a8 0e       	add	r10, r24
    2718:	b9 1e       	adc	r11, r25
  }

  while (* pString != '\0') {
    //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
    if ((Xpoint + Font->Width ) > Paint.Width ) {
      Xpoint = Xstart;
    271a:	3c 82       	std	Y+4, r3	; 0x04
    271c:	2b 82       	std	Y+3, r2	; 0x03
      Ypoint += Font->Height;
    }

    // If the Y direction is full, reposition to(Xstart, Ystart)
    if ((Ypoint  + Font->Height ) > Paint.Height ) {
    271e:	f6 01       	movw	r30, r12
    2720:	84 81       	ldd	r24, Z+4	; 0x04
    2722:	95 81       	ldd	r25, Z+5	; 0x05
    2724:	8a 0d       	add	r24, r10
    2726:	9b 1d       	adc	r25, r11
    2728:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__data_end+0x4>
    272c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__data_end+0x5>
    2730:	28 17       	cp	r18, r24
    2732:	39 07       	cpc	r19, r25
    2734:	18 f4       	brcc	.+6      	; 0x273c <Paint_DrawString_EN+0xa8>
      Xpoint = Xstart;
      Ypoint = Ystart;
    2736:	54 01       	movw	r10, r8
      Ypoint += Font->Height;
    }

    // If the Y direction is full, reposition to(Xstart, Ystart)
    if ((Ypoint  + Font->Height ) > Paint.Height ) {
      Xpoint = Xstart;
    2738:	3c 82       	std	Y+4, r3	; 0x04
    273a:	2b 82       	std	Y+3, r2	; 0x03
      Ypoint = Ystart;
    }
    Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
    273c:	e9 80       	ldd	r14, Y+1	; 0x01
    273e:	fa 80       	ldd	r15, Y+2	; 0x02
    2740:	82 01       	movw	r16, r4
    2742:	96 01       	movw	r18, r12
    2744:	b5 01       	movw	r22, r10
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	9c 81       	ldd	r25, Y+4	; 0x04
    274a:	0e 94 76 12 	call	0x24ec	; 0x24ec <Paint_DrawChar>

    //The next character of the address
    pString ++;
    274e:	ff ef       	ldi	r31, 0xFF	; 255
    2750:	6f 1a       	sub	r6, r31
    2752:	7f 0a       	sbc	r7, r31

    //The next word of the abscissa increases the font of the broadband
    Xpoint += Font->Width;
    2754:	f6 01       	movw	r30, r12
    2756:	82 81       	ldd	r24, Z+2	; 0x02
    2758:	93 81       	ldd	r25, Z+3	; 0x03
    275a:	2b 81       	ldd	r18, Y+3	; 0x03
    275c:	3c 81       	ldd	r19, Y+4	; 0x04
    275e:	28 0f       	add	r18, r24
    2760:	39 1f       	adc	r19, r25
    2762:	3c 83       	std	Y+4, r19	; 0x04
    2764:	2b 83       	std	Y+3, r18	; 0x03
  if (Xstart > Paint.Width || Ystart > Paint.Height) {
    //Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
    return;
  }

  while (* pString != '\0') {
    2766:	f3 01       	movw	r30, r6
    2768:	40 81       	ld	r20, Z
    276a:	41 11       	cpse	r20, r1
    276c:	c4 cf       	rjmp	.-120    	; 0x26f6 <Paint_DrawString_EN+0x62>
    pString ++;

    //The next word of the abscissa increases the font of the broadband
    Xpoint += Font->Width;
  }
}
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	ff 90       	pop	r15
    2780:	ef 90       	pop	r14
    2782:	df 90       	pop	r13
    2784:	cf 90       	pop	r12
    2786:	bf 90       	pop	r11
    2788:	af 90       	pop	r10
    278a:	9f 90       	pop	r9
    278c:	8f 90       	pop	r8
    278e:	7f 90       	pop	r7
    2790:	6f 90       	pop	r6
    2792:	5f 90       	pop	r5
    2794:	4f 90       	pop	r4
    2796:	3f 90       	pop	r3
    2798:	2f 90       	pop	r2
    279a:	08 95       	ret

0000279c <LCD_WriteData_Byte>:
	for(i = Ystart; i <= Yend-1; i++){													   	 	
		for(j = Xstart; j <= Xend-1; j++){
			LCD_WriteData_Word(color);
		}
	} 					  	    
}
    279c:	cf 93       	push	r28
    279e:	c8 2f       	mov	r28, r24
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	8a e0       	ldi	r24, 0x0A	; 10
    27a4:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
    27a8:	61 e0       	ldi	r22, 0x01	; 1
    27aa:	87 e0       	ldi	r24, 0x07	; 7
    27ac:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
    27b0:	8c 2f       	mov	r24, r28
    27b2:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <SPI_transfer>
    27b6:	61 e0       	ldi	r22, 0x01	; 1
    27b8:	8a e0       	ldi	r24, 0x0A	; 10
    27ba:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
    27be:	cf 91       	pop	r28
    27c0:	08 95       	ret

000027c2 <LCD_Write_Command>:
    27c2:	cf 93       	push	r28
    27c4:	c8 2f       	mov	r28, r24
    27c6:	60 e0       	ldi	r22, 0x00	; 0
    27c8:	8a e0       	ldi	r24, 0x0A	; 10
    27ca:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
    27ce:	60 e0       	ldi	r22, 0x00	; 0
    27d0:	87 e0       	ldi	r24, 0x07	; 7
    27d2:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
    27d6:	8c 2f       	mov	r24, r28
    27d8:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <SPI_transfer>
    27dc:	cf 91       	pop	r28
    27de:	08 95       	ret

000027e0 <LCD_Reset>:
    27e0:	2f ef       	ldi	r18, 0xFF	; 255
    27e2:	83 ec       	ldi	r24, 0xC3	; 195
    27e4:	99 e0       	ldi	r25, 0x09	; 9
    27e6:	21 50       	subi	r18, 0x01	; 1
    27e8:	80 40       	sbci	r24, 0x00	; 0
    27ea:	90 40       	sbci	r25, 0x00	; 0
    27ec:	e1 f7       	brne	.-8      	; 0x27e6 <LCD_Reset+0x6>
    27ee:	00 c0       	rjmp	.+0      	; 0x27f0 <LCD_Reset+0x10>
    27f0:	00 00       	nop
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	88 e0       	ldi	r24, 0x08	; 8
    27f6:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
    27fa:	2f ef       	ldi	r18, 0xFF	; 255
    27fc:	83 ec       	ldi	r24, 0xC3	; 195
    27fe:	99 e0       	ldi	r25, 0x09	; 9
    2800:	21 50       	subi	r18, 0x01	; 1
    2802:	80 40       	sbci	r24, 0x00	; 0
    2804:	90 40       	sbci	r25, 0x00	; 0
    2806:	e1 f7       	brne	.-8      	; 0x2800 <LCD_Reset+0x20>
    2808:	00 c0       	rjmp	.+0      	; 0x280a <LCD_Reset+0x2a>
    280a:	00 00       	nop
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	88 e0       	ldi	r24, 0x08	; 8
    2810:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
    2814:	2f ef       	ldi	r18, 0xFF	; 255
    2816:	83 ec       	ldi	r24, 0xC3	; 195
    2818:	99 e0       	ldi	r25, 0x09	; 9
    281a:	21 50       	subi	r18, 0x01	; 1
    281c:	80 40       	sbci	r24, 0x00	; 0
    281e:	90 40       	sbci	r25, 0x00	; 0
    2820:	e1 f7       	brne	.-8      	; 0x281a <LCD_Reset+0x3a>
    2822:	00 c0       	rjmp	.+0      	; 0x2824 <LCD_Reset+0x44>
    2824:	00 00       	nop
    2826:	08 95       	ret

00002828 <LCD_WriteData_Word>:
    2828:	cf 93       	push	r28
    282a:	df 93       	push	r29
    282c:	c8 2f       	mov	r28, r24
    282e:	d9 2f       	mov	r29, r25
    2830:	60 e0       	ldi	r22, 0x00	; 0
    2832:	8a e0       	ldi	r24, 0x0A	; 10
    2834:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
    2838:	61 e0       	ldi	r22, 0x01	; 1
    283a:	87 e0       	ldi	r24, 0x07	; 7
    283c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
    2840:	8d 2f       	mov	r24, r29
    2842:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <SPI_transfer>
    2846:	8c 2f       	mov	r24, r28
    2848:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <SPI_transfer>
    284c:	61 e0       	ldi	r22, 0x01	; 1
    284e:	8a e0       	ldi	r24, 0x0A	; 10
    2850:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	08 95       	ret

0000285a <LCD_Init>:
    285a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <LCD_Reset>
    285e:	86 e3       	ldi	r24, 0x36	; 54
    2860:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    2864:	80 ea       	ldi	r24, 0xA0	; 160
    2866:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    286a:	8a e3       	ldi	r24, 0x3A	; 58
    286c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    2870:	85 e0       	ldi	r24, 0x05	; 5
    2872:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2876:	81 e2       	ldi	r24, 0x21	; 33
    2878:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    287c:	8a e2       	ldi	r24, 0x2A	; 42
    287e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2894:	8f e3       	ldi	r24, 0x3F	; 63
    2896:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    289a:	8b e2       	ldi	r24, 0x2B	; 43
    289c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    28b2:	8f ee       	ldi	r24, 0xEF	; 239
    28b4:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    28b8:	82 eb       	ldi	r24, 0xB2	; 178
    28ba:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    28be:	8c e0       	ldi	r24, 0x0C	; 12
    28c0:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    28c4:	8c e0       	ldi	r24, 0x0C	; 12
    28c6:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    28d0:	83 e3       	ldi	r24, 0x33	; 51
    28d2:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    28d6:	83 e3       	ldi	r24, 0x33	; 51
    28d8:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    28dc:	87 eb       	ldi	r24, 0xB7	; 183
    28de:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    28e2:	85 e3       	ldi	r24, 0x35	; 53
    28e4:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    28e8:	8b eb       	ldi	r24, 0xBB	; 187
    28ea:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    28ee:	8f e1       	ldi	r24, 0x1F	; 31
    28f0:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    28f4:	80 ec       	ldi	r24, 0xC0	; 192
    28f6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    28fa:	8c e2       	ldi	r24, 0x2C	; 44
    28fc:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2900:	82 ec       	ldi	r24, 0xC2	; 194
    2902:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    290c:	83 ec       	ldi	r24, 0xC3	; 195
    290e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    2912:	82 e1       	ldi	r24, 0x12	; 18
    2914:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2918:	84 ec       	ldi	r24, 0xC4	; 196
    291a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    291e:	80 e2       	ldi	r24, 0x20	; 32
    2920:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2924:	86 ec       	ldi	r24, 0xC6	; 198
    2926:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    292a:	8f e0       	ldi	r24, 0x0F	; 15
    292c:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2930:	80 ed       	ldi	r24, 0xD0	; 208
    2932:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    2936:	84 ea       	ldi	r24, 0xA4	; 164
    2938:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    293c:	81 ea       	ldi	r24, 0xA1	; 161
    293e:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2942:	80 ee       	ldi	r24, 0xE0	; 224
    2944:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    2948:	80 ed       	ldi	r24, 0xD0	; 208
    294a:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    294e:	88 e0       	ldi	r24, 0x08	; 8
    2950:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2954:	81 e1       	ldi	r24, 0x11	; 17
    2956:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    295a:	88 e0       	ldi	r24, 0x08	; 8
    295c:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2960:	8c e0       	ldi	r24, 0x0C	; 12
    2962:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2966:	85 e1       	ldi	r24, 0x15	; 21
    2968:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    296c:	89 e3       	ldi	r24, 0x39	; 57
    296e:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2972:	83 e3       	ldi	r24, 0x33	; 51
    2974:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2978:	80 e5       	ldi	r24, 0x50	; 80
    297a:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    297e:	86 e3       	ldi	r24, 0x36	; 54
    2980:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2984:	83 e1       	ldi	r24, 0x13	; 19
    2986:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    298a:	84 e1       	ldi	r24, 0x14	; 20
    298c:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2990:	89 e2       	ldi	r24, 0x29	; 41
    2992:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2996:	8d e2       	ldi	r24, 0x2D	; 45
    2998:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    299c:	81 ee       	ldi	r24, 0xE1	; 225
    299e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    29a2:	80 ed       	ldi	r24, 0xD0	; 208
    29a4:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    29a8:	88 e0       	ldi	r24, 0x08	; 8
    29aa:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    29ae:	80 e1       	ldi	r24, 0x10	; 16
    29b0:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    29b4:	88 e0       	ldi	r24, 0x08	; 8
    29b6:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    29ba:	86 e0       	ldi	r24, 0x06	; 6
    29bc:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    29c0:	86 e0       	ldi	r24, 0x06	; 6
    29c2:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    29c6:	89 e3       	ldi	r24, 0x39	; 57
    29c8:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    29cc:	84 e4       	ldi	r24, 0x44	; 68
    29ce:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    29d2:	81 e5       	ldi	r24, 0x51	; 81
    29d4:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    29d8:	8b e0       	ldi	r24, 0x0B	; 11
    29da:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    29de:	86 e1       	ldi	r24, 0x16	; 22
    29e0:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    29e4:	84 e1       	ldi	r24, 0x14	; 20
    29e6:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    29ea:	8f e2       	ldi	r24, 0x2F	; 47
    29ec:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    29f0:	81 e3       	ldi	r24, 0x31	; 49
    29f2:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    29f6:	81 e2       	ldi	r24, 0x21	; 33
    29f8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    29fc:	81 e1       	ldi	r24, 0x11	; 17
    29fe:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    2a02:	89 e2       	ldi	r24, 0x29	; 41
    2a04:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    2a08:	08 95       	ret

00002a0a <LCD_SetWindow>:
    2a0a:	ef 92       	push	r14
    2a0c:	ff 92       	push	r15
    2a0e:	0f 93       	push	r16
    2a10:	1f 93       	push	r17
    2a12:	cf 93       	push	r28
    2a14:	df 93       	push	r29
    2a16:	e8 2e       	mov	r14, r24
    2a18:	f6 2e       	mov	r15, r22
    2a1a:	8a 01       	movw	r16, r20
    2a1c:	e9 01       	movw	r28, r18
    2a1e:	8a e2       	ldi	r24, 0x2A	; 42
    2a20:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2a2a:	8e 2d       	mov	r24, r14
    2a2c:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2a30:	c8 01       	movw	r24, r16
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	89 2f       	mov	r24, r25
    2a36:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2a3a:	8f ef       	ldi	r24, 0xFF	; 255
    2a3c:	80 0f       	add	r24, r16
    2a3e:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2a42:	8b e2       	ldi	r24, 0x2B	; 43
    2a44:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2a4e:	8f 2d       	mov	r24, r15
    2a50:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2a54:	ce 01       	movw	r24, r28
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	89 2f       	mov	r24, r25
    2a5a:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2a5e:	8c 2f       	mov	r24, r28
    2a60:	81 50       	subi	r24, 0x01	; 1
    2a62:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2a66:	8c e2       	ldi	r24, 0x2C	; 44
    2a68:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    2a6c:	df 91       	pop	r29
    2a6e:	cf 91       	pop	r28
    2a70:	1f 91       	pop	r17
    2a72:	0f 91       	pop	r16
    2a74:	ff 90       	pop	r15
    2a76:	ef 90       	pop	r14
    2a78:	08 95       	ret

00002a7a <LCD_SetCursor>:
    2a7a:	0f 93       	push	r16
    2a7c:	1f 93       	push	r17
    2a7e:	cf 93       	push	r28
    2a80:	df 93       	push	r29
    2a82:	18 2f       	mov	r17, r24
    2a84:	09 2f       	mov	r16, r25
    2a86:	c6 2f       	mov	r28, r22
    2a88:	d7 2f       	mov	r29, r23
    2a8a:	8a e2       	ldi	r24, 0x2A	; 42
    2a8c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    2a90:	80 2f       	mov	r24, r16
    2a92:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2a96:	81 2f       	mov	r24, r17
    2a98:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2a9c:	80 2f       	mov	r24, r16
    2a9e:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2aa2:	81 2f       	mov	r24, r17
    2aa4:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2aa8:	8b e2       	ldi	r24, 0x2B	; 43
    2aaa:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    2aae:	8d 2f       	mov	r24, r29
    2ab0:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2ab4:	8c 2f       	mov	r24, r28
    2ab6:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2aba:	8d 2f       	mov	r24, r29
    2abc:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2ac0:	8c 2f       	mov	r24, r28
    2ac2:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteData_Byte>
    2ac6:	8c e2       	ldi	r24, 0x2C	; 44
    2ac8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_Write_Command>
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	1f 91       	pop	r17
    2ad2:	0f 91       	pop	r16
    2ad4:	08 95       	ret

00002ad6 <LCD_Clear>:
    2ad6:	ef 92       	push	r14
    2ad8:	ff 92       	push	r15
    2ada:	0f 93       	push	r16
    2adc:	1f 93       	push	r17
    2ade:	cf 93       	push	r28
    2ae0:	df 93       	push	r29
    2ae2:	08 2f       	mov	r16, r24
    2ae4:	19 2f       	mov	r17, r25
    2ae6:	20 ef       	ldi	r18, 0xF0	; 240
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	40 e4       	ldi	r20, 0x40	; 64
    2aec:	51 e0       	ldi	r21, 0x01	; 1
    2aee:	60 e0       	ldi	r22, 0x00	; 0
    2af0:	70 e0       	ldi	r23, 0x00	; 0
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_SetWindow>
    2afa:	61 e0       	ldi	r22, 0x01	; 1
    2afc:	87 e0       	ldi	r24, 0x07	; 7
    2afe:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
    2b02:	e1 2c       	mov	r14, r1
    2b04:	f1 2c       	mov	r15, r1
    2b06:	10 c0       	rjmp	.+32     	; 0x2b28 <LCD_Clear+0x52>
    2b08:	81 2f       	mov	r24, r17
    2b0a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <SPI_transfer>
    2b0e:	80 2f       	mov	r24, r16
    2b10:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <SPI_transfer>
    2b14:	21 96       	adiw	r28, 0x01	; 1
    2b16:	02 c0       	rjmp	.+4      	; 0x2b1c <LCD_Clear+0x46>
    2b18:	c0 e0       	ldi	r28, 0x00	; 0
    2b1a:	d0 e0       	ldi	r29, 0x00	; 0
    2b1c:	c0 3f       	cpi	r28, 0xF0	; 240
    2b1e:	d1 05       	cpc	r29, r1
    2b20:	98 f3       	brcs	.-26     	; 0x2b08 <LCD_Clear+0x32>
    2b22:	8f ef       	ldi	r24, 0xFF	; 255
    2b24:	e8 1a       	sub	r14, r24
    2b26:	f8 0a       	sbc	r15, r24
    2b28:	80 e4       	ldi	r24, 0x40	; 64
    2b2a:	e8 16       	cp	r14, r24
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	f8 06       	cpc	r15, r24
    2b30:	98 f3       	brcs	.-26     	; 0x2b18 <LCD_Clear+0x42>
    2b32:	df 91       	pop	r29
    2b34:	cf 91       	pop	r28
    2b36:	1f 91       	pop	r17
    2b38:	0f 91       	pop	r16
    2b3a:	ff 90       	pop	r15
    2b3c:	ef 90       	pop	r14
    2b3e:	08 95       	ret

00002b40 <LCD_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	ea 01       	movw	r28, r20
	LCD_SetCursor(x, y);
    2b46:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <LCD_SetCursor>
	LCD_WriteData_Word(Color); 	    
    2b4a:	ce 01       	movw	r24, r28
    2b4c:	0e 94 14 14 	call	0x2828	; 0x2828 <LCD_WriteData_Word>
}
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	08 95       	ret

00002b56 <setup>:
  
  //Paint_DrawFloatNum (5, 150 ,987.654321,4,  &Font20,    WHITE,   LIGHTGREEN);

}
void loop()
{
    2b56:	cf 92       	push	r12
    2b58:	ef 92       	push	r14
    2b5a:	ff 92       	push	r15
    2b5c:	0f 93       	push	r16
    2b5e:	1f 93       	push	r17
    2b60:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <Config_Init>
    2b64:	0e 94 2d 14 	call	0x285a	; 0x285a <LCD_Init>
    2b68:	8f ef       	ldi	r24, 0xFF	; 255
    2b6a:	9f ef       	ldi	r25, 0xFF	; 255
    2b6c:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_Clear>
    2b70:	2f ef       	ldi	r18, 0xFF	; 255
    2b72:	3f ef       	ldi	r19, 0xFF	; 255
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	50 e0       	ldi	r21, 0x00	; 0
    2b78:	60 ef       	ldi	r22, 0xF0	; 240
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	80 e4       	ldi	r24, 0x40	; 64
    2b7e:	91 e0       	ldi	r25, 0x01	; 1
    2b80:	0e 94 67 0e 	call	0x1cce	; 0x1cce <Paint_NewImage>
    2b84:	8f ef       	ldi	r24, 0xFF	; 255
    2b86:	9f ef       	ldi	r25, 0xFF	; 255
    2b88:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <Paint_Clear>
    2b8c:	0f 2e       	mov	r0, r31
    2b8e:	e1 2c       	mov	r14, r1
    2b90:	f8 ef       	ldi	r31, 0xF8	; 248
    2b92:	ff 2e       	mov	r15, r31
    2b94:	f0 2d       	mov	r31, r0
    2b96:	00 ee       	ldi	r16, 0xE0	; 224
    2b98:	1f ef       	ldi	r17, 0xFF	; 255
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	31 e0       	ldi	r19, 0x01	; 1
    2b9e:	46 ef       	ldi	r20, 0xF6	; 246
    2ba0:	51 e0       	ldi	r21, 0x01	; 1
    2ba2:	6a e0       	ldi	r22, 0x0A	; 10
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
    2ba6:	8e e1       	ldi	r24, 0x1E	; 30
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	0e 94 4a 13 	call	0x2694	; 0x2694 <Paint_DrawString_EN>
    2bae:	0f 2e       	mov	r0, r31
    2bb0:	ee 24       	eor	r14, r14
    2bb2:	ea 94       	dec	r14
    2bb4:	ff e7       	ldi	r31, 0x7F	; 127
    2bb6:	ff 2e       	mov	r15, r31
    2bb8:	f0 2d       	mov	r31, r0
    2bba:	0f e1       	ldi	r16, 0x1F	; 31
    2bbc:	10 e0       	ldi	r17, 0x00	; 0
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	31 e0       	ldi	r19, 0x01	; 1
    2bc2:	4a ef       	ldi	r20, 0xFA	; 250
    2bc4:	51 e0       	ldi	r21, 0x01	; 1
    2bc6:	62 e2       	ldi	r22, 0x22	; 34
    2bc8:	70 e0       	ldi	r23, 0x00	; 0
    2bca:	8e e1       	ldi	r24, 0x1E	; 30
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	0e 94 4a 13 	call	0x2694	; 0x2694 <Paint_DrawString_EN>
    2bd2:	c1 2c       	mov	r12, r1
    2bd4:	68 94       	set
    2bd6:	ee 24       	eor	r14, r14
    2bd8:	e1 f8       	bld	r14, 1
    2bda:	00 e0       	ldi	r16, 0x00	; 0
    2bdc:	18 ef       	ldi	r17, 0xF8	; 248
    2bde:	2a e3       	ldi	r18, 0x3A	; 58
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	41 ee       	ldi	r20, 0xE1	; 225
    2be4:	50 e0       	ldi	r21, 0x00	; 0
    2be6:	6a e0       	ldi	r22, 0x0A	; 10
    2be8:	70 e0       	ldi	r23, 0x00	; 0
    2bea:	8d e7       	ldi	r24, 0x7D	; 125
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	0e 94 a7 10 	call	0x214e	; 0x214e <Paint_DrawRectangle>
    2bf2:	0f e1       	ldi	r16, 0x1F	; 31
    2bf4:	18 ef       	ldi	r17, 0xF8	; 248
    2bf6:	2a e3       	ldi	r18, 0x3A	; 58
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	41 ee       	ldi	r20, 0xE1	; 225
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	6a e0       	ldi	r22, 0x0A	; 10
    2c00:	70 e0       	ldi	r23, 0x00	; 0
    2c02:	8d e7       	ldi	r24, 0x7D	; 125
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <Paint_DrawLine>
    2c0a:	2a e3       	ldi	r18, 0x3A	; 58
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	4d e7       	ldi	r20, 0x7D	; 125
    2c10:	50 e0       	ldi	r21, 0x00	; 0
    2c12:	6a e0       	ldi	r22, 0x0A	; 10
    2c14:	70 e0       	ldi	r23, 0x00	; 0
    2c16:	81 ee       	ldi	r24, 0xE1	; 225
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <Paint_DrawLine>
    2c1e:	e1 2c       	mov	r14, r1
    2c20:	02 e0       	ldi	r16, 0x02	; 2
    2c22:	2f e1       	ldi	r18, 0x1F	; 31
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	49 e1       	ldi	r20, 0x19	; 25
    2c28:	50 e0       	ldi	r21, 0x00	; 0
    2c2a:	64 e6       	ldi	r22, 0x64	; 100
    2c2c:	70 e0       	ldi	r23, 0x00	; 0
    2c2e:	86 e9       	ldi	r24, 0x96	; 150
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	0e 94 17 11 	call	0x222e	; 0x222e <Paint_DrawCircle>
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	49 e1       	ldi	r20, 0x19	; 25
    2c3c:	50 e0       	ldi	r21, 0x00	; 0
    2c3e:	64 e6       	ldi	r22, 0x64	; 100
    2c40:	70 e0       	ldi	r23, 0x00	; 0
    2c42:	84 eb       	ldi	r24, 0xB4	; 180
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	0e 94 17 11 	call	0x222e	; 0x222e <Paint_DrawCircle>
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	38 ef       	ldi	r19, 0xF8	; 248
    2c4e:	49 e1       	ldi	r20, 0x19	; 25
    2c50:	50 e0       	ldi	r21, 0x00	; 0
    2c52:	64 e6       	ldi	r22, 0x64	; 100
    2c54:	70 e0       	ldi	r23, 0x00	; 0
    2c56:	82 ed       	ldi	r24, 0xD2	; 210
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	0e 94 17 11 	call	0x222e	; 0x222e <Paint_DrawCircle>
    2c5e:	20 ee       	ldi	r18, 0xE0	; 224
    2c60:	3f ef       	ldi	r19, 0xFF	; 255
    2c62:	49 e1       	ldi	r20, 0x19	; 25
    2c64:	50 e0       	ldi	r21, 0x00	; 0
    2c66:	6d e7       	ldi	r22, 0x7D	; 125
    2c68:	70 e0       	ldi	r23, 0x00	; 0
    2c6a:	85 ea       	ldi	r24, 0xA5	; 165
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	0e 94 17 11 	call	0x222e	; 0x222e <Paint_DrawCircle>
    2c72:	20 ee       	ldi	r18, 0xE0	; 224
    2c74:	37 e0       	ldi	r19, 0x07	; 7
    2c76:	49 e1       	ldi	r20, 0x19	; 25
    2c78:	50 e0       	ldi	r21, 0x00	; 0
    2c7a:	6d e7       	ldi	r22, 0x7D	; 125
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	83 ec       	ldi	r24, 0xC3	; 195
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	0e 94 17 11 	call	0x222e	; 0x222e <Paint_DrawCircle>
    2c86:	1f 91       	pop	r17
    2c88:	0f 91       	pop	r16
    2c8a:	ff 90       	pop	r15
    2c8c:	ef 90       	pop	r14
    2c8e:	cf 90       	pop	r12
    2c90:	08 95       	ret

00002c92 <main>:
  
}

int main() {
	setup();
    2c92:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <setup>
    2c96:	ff cf       	rjmp	.-2      	; 0x2c96 <main+0x4>

00002c98 <SPI_begin>:
	(uint16_t) &DDRC,
	(uint16_t) &DDRD,
};


void SPI_begin() {
    2c98:	cf 93       	push	r28
	uint8_t sreg = SREG;
    2c9a:	cf b7       	in	r28, 0x3f	; 63
	cli();
    2c9c:	f8 94       	cli
	
	uint8_t port = PORTB;
    2c9e:	e5 b1       	in	r30, 0x05	; 5
	uint8_t bit = _BV(2);
	volatile uint8_t *reg = (volatile uint8_t *)pgm_read_word( port_to_mode_PGM[port]);
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	ee 0f       	add	r30, r30
    2ca4:	ff 1f       	adc	r31, r31
    2ca6:	e8 5b       	subi	r30, 0xB8	; 184
    2ca8:	f4 4e       	sbci	r31, 0xE4	; 228
    2caa:	01 90       	ld	r0, Z+
    2cac:	f0 81       	ld	r31, Z
    2cae:	e0 2d       	mov	r30, r0
    2cb0:	a5 91       	lpm	r26, Z+
    2cb2:	b4 91       	lpm	r27, Z
	
	if(!(*reg & bit)){
    2cb4:	8c 91       	ld	r24, X
    2cb6:	82 fd       	sbrc	r24, 2
    2cb8:	04 c0       	rjmp	.+8      	; 0x2cc2 <SPI_begin+0x2a>
		digitalWrite(SS, 1);
    2cba:	61 e0       	ldi	r22, 0x01	; 1
    2cbc:	8a e0       	ldi	r24, 0x0A	; 10
    2cbe:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <digitalWrite>
	}
	
	DDRB |= (1 << PINB2);
    2cc2:	84 b1       	in	r24, 0x04	; 4
    2cc4:	84 60       	ori	r24, 0x04	; 4
    2cc6:	84 b9       	out	0x04, r24	; 4
	
	SPCR |= _BV(MSTR);
    2cc8:	8c b5       	in	r24, 0x2c	; 44
    2cca:	80 61       	ori	r24, 0x10	; 16
    2ccc:	8c bd       	out	0x2c, r24	; 44
	SPCR |= _BV(SPE);
    2cce:	8c b5       	in	r24, 0x2c	; 44
    2cd0:	80 64       	ori	r24, 0x40	; 64
    2cd2:	8c bd       	out	0x2c, r24	; 44
	
	DDRB |= (1 << PINB5) | (1 << PINB3);
    2cd4:	84 b1       	in	r24, 0x04	; 4
    2cd6:	88 62       	ori	r24, 0x28	; 40
    2cd8:	84 b9       	out	0x04, r24	; 4
	
	SREG = sreg;
    2cda:	cf bf       	out	0x3f, r28	; 63
}
    2cdc:	cf 91       	pop	r28
    2cde:	08 95       	ret

00002ce0 <SPI_transfer>:

uint8_t SPI_transfer(uint8_t data) {
	SPDR = data;
    2ce0:	8e bd       	out	0x2e, r24	; 46
  
    asm volatile("NOP");
    2ce2:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    2ce4:	0d b4       	in	r0, 0x2d	; 45
    2ce6:	07 fe       	sbrs	r0, 7
    2ce8:	fd cf       	rjmp	.-6      	; 0x2ce4 <SPI_transfer+0x4>
    return SPDR;
    2cea:	8e b5       	in	r24, 0x2e	; 46
    2cec:	08 95       	ret

00002cee <puts>:
    2cee:	0f 93       	push	r16
    2cf0:	1f 93       	push	r17
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    2cf6:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <__iob+0x2>
    2cfa:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <__iob+0x3>
    2cfe:	23 81       	ldd	r18, Z+3	; 0x03
    2d00:	21 ff       	sbrs	r18, 1
    2d02:	1b c0       	rjmp	.+54     	; 0x2d3a <puts+0x4c>
    2d04:	8c 01       	movw	r16, r24
    2d06:	d0 e0       	ldi	r29, 0x00	; 0
    2d08:	c0 e0       	ldi	r28, 0x00	; 0
    2d0a:	f8 01       	movw	r30, r16
    2d0c:	81 91       	ld	r24, Z+
    2d0e:	8f 01       	movw	r16, r30
    2d10:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__iob+0x2>
    2d14:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__iob+0x3>
    2d18:	db 01       	movw	r26, r22
    2d1a:	18 96       	adiw	r26, 0x08	; 8
    2d1c:	ed 91       	ld	r30, X+
    2d1e:	fc 91       	ld	r31, X
    2d20:	19 97       	sbiw	r26, 0x09	; 9
    2d22:	88 23       	and	r24, r24
    2d24:	31 f0       	breq	.+12     	; 0x2d32 <puts+0x44>
    2d26:	09 95       	icall
    2d28:	89 2b       	or	r24, r25
    2d2a:	79 f3       	breq	.-34     	; 0x2d0a <puts+0x1c>
    2d2c:	df ef       	ldi	r29, 0xFF	; 255
    2d2e:	cf ef       	ldi	r28, 0xFF	; 255
    2d30:	ec cf       	rjmp	.-40     	; 0x2d0a <puts+0x1c>
    2d32:	8a e0       	ldi	r24, 0x0A	; 10
    2d34:	09 95       	icall
    2d36:	89 2b       	or	r24, r25
    2d38:	19 f0       	breq	.+6      	; 0x2d40 <puts+0x52>
    2d3a:	8f ef       	ldi	r24, 0xFF	; 255
    2d3c:	9f ef       	ldi	r25, 0xFF	; 255
    2d3e:	02 c0       	rjmp	.+4      	; 0x2d44 <puts+0x56>
    2d40:	8d 2f       	mov	r24, r29
    2d42:	9c 2f       	mov	r25, r28
    2d44:	df 91       	pop	r29
    2d46:	cf 91       	pop	r28
    2d48:	1f 91       	pop	r17
    2d4a:	0f 91       	pop	r16
    2d4c:	08 95       	ret

00002d4e <_exit>:
    2d4e:	f8 94       	cli

00002d50 <__stop_program>:
    2d50:	ff cf       	rjmp	.-2      	; 0x2d50 <__stop_program>
